{"meta":{"title":"No one's sky","subtitle":"To find your fire keeper","description":"","author":"Himitsu98","url":"http://yoursite.com","root":"/"},"pages":[{"title":"categories","date":"2019-11-12T02:50:55.000Z","updated":"2019-11-15T04:13:46.035Z","comments":true,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""},{"title":"tags","date":"2019-11-15T04:08:46.000Z","updated":"2019-11-15T04:14:24.714Z","comments":true,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"1001 ~ 1015","slug":"1001 〜 1015","date":"2019-11-12T02:00:00.000Z","updated":"2019-11-15T04:12:20.801Z","comments":true,"path":"2019/11/12/1001 〜 1015/","link":"","permalink":"http://yoursite.com/2019/11/12/1001%20%E3%80%9C%201015/","excerpt":"PAT 甲级 1001 〜 1015","text":"PAT 甲级 1001 〜 1015 1001 A+B Format Calculate a+b and output the sum in standard format – that is, the digits must be separated into groups of three by commas (unless there are less than four digits). 输入格式： Each input file contains one test case. Each case contains a pair of integers a and b where −106≤a,b≤106. The numbers are separated by a space. 输出格式： For each test case, you should output the sum of a and b in one line. The sum must be written in the standard format. 输入样例： -1000000 9 输出样例： -999,991 答案： #include &lt;iostream&gt;#include &lt;string&gt;using namespace std;int main() &#123; int a, b; scanf(\"%d %d\", &amp;a, &amp;b); //10的6次方，小于10的9次方，用int型 string str = to_string(a + b); int length = str.size(); int n = 1; while ((str[0] == '-' &amp;&amp; length - 1 &gt; 3) || (str[0] != '-' &amp;&amp; length &gt; 3)) &#123; str.insert(str.size() - n * 3 - n + 1, \",\"); length -= 3; n++; &#125; cout &lt;&lt; str;&#125; 1002 A+B for Polynomials 重点：hash思想 This time, you are supposed to find A+B where A and B are two polynomials. 输入格式： Each input file contains one test case. Each case occupies 2 lines, and each line contains the information of a polynomial: K N1 aN1 N2 aN2 … NK aNK where K is the number of nonzero terms in the polynomial, Ni and aNi (i=1,2,⋯,K) are the exponents（指数） and coefficients（系数）, respectively（各自）. It is given that 1 ≤ K ≤ 10, 0 ≤ NK &lt; ⋯ &lt; N2&lt; N1 ≤ 1000. 输出格式： For each test case you should output the sum of A and B in one line, with the same format as the input. Notice that there must be NO extra space at the end of each line. Please be accurate to 1 decimal place. 输入样例： 2 1 2.4 0 3.22 2 1.5 1 0.5 输出样例： 3 2 1.5 1 2.9 0 3.2 答案： /* * 计算多项式的和，输入两行，每行第一个给出非零项个数，随后的每两个数分别为指数和系数， 要求输出格式也同上； * 指数小于等于1000。 * 这题与底数无关，将指数相同的项系数相加即可。 * 1. 读入第一个输入，用一个数组，散列地存入所有项， * 2. 从第二个输入起，遇到相同的指数，即将系数相加, arr[n] = m 即为 指数为n的项的系数为m * 3. 由于最中需要输出一个总数量K，便利找不为0.0的 * 4. 注意相加和为0的项 */#include &lt;iostream&gt;using namespace std;int main() &#123; double arr[1010] = &#123;0.0&#125;; int k1, k2, n; double num; scanf(\"%d\", &amp;k1); for (int i = 0; i &lt; k1; ++i) &#123; scanf(\"%d%lf\", &amp;n, &amp;num); arr[n] += num; &#125; scanf(\"%d\", &amp;k2); for (int j = 0; j &lt; k2; ++j) &#123; scanf(\"%d%lf\", &amp;n,&amp;num); arr[n] += num; &#125; int count = 0; for (int l = 0; l &lt; 1010; ++l) &#123; if (arr[l] != 0.0) count++; &#125; printf(\"%d\", count); for (int k = 1000; k &gt;= 0; k--) &#123; if (arr[k] != 0.0) &#123; printf(\" %d %.1f\", k, arr[k]); &#125; &#125;&#125; 1004 Counting Leaves 重点：静态树，递归 A family hierarchy（集团） is usually presented by a pedigree tree. Your job is to count those family members who have no child. 输入格式： Each input file contains one test case. Each case starts with a line containing 0 &lt; N &lt; 100, the number of nodes in a tree, and M (&lt;N), the number of non-leaf nodes. Then M lines follow, each in the format: ID K ID[1] ID[2] ... ID[K] where ID is a two-digit number representing a given non-leaf node, K is the number of its children, followed by a sequence of two-digit ID's of its children. For the sake（目的） of simplicity, let us fix the root ID to be 01. The input ends with N being 0. That case must NOT be processed. 输出格式： For each test case, you are supposed to count those family members who have no child for every seniority level starting from the root. The numbers must be printed in a line, separated by a space, and there must be no extra space at the end of each line.d The sample case represents a tree with only 2 nodes, where 01 is the root and 02 is its only child. Hence on the root 01 level, there is 0 leaf node; and on the next level, there is 1 leaf node. Then we should output 0 1 in a line. 输入样例： 2 101 1 02 输出样例： 0 1 答案： /* * 每个实例给出一个0&lt;N&lt;100，表示树的结点个数，再给出一个M(&lt;N)，作为非叶结点的个数 * 随后列出所有的M个非叶结点，格式为：ID K ID[1] ID[2] ... ID[K] * ID为给定的非叶结点，K是他的孩子数，其后的两位数为孩子结点的ID，根结点的ID恒为01 * 层序遍历每一层，输出所有叶子结点 * 1. 使用一个vector数组tree存储每一个结点的孩子信息，vector[i].size() = 0 时，为叶结点 * 2. 遍历tree，每找到一个叶子结点，该层的book[deptp]就加1 * 3. 输出 * * 输入： * 2 1 * 01 1 02 * 输出： * 0 1 */#include &lt;vector&gt;#include &lt;algorithm&gt;#include &lt;iostream&gt;using namespace std;const int N = 101; //结点数vector&lt;int&gt; tree[N];int book[100];int maxDepth = -1;//用递归从根节点遍历void DFS(int index, int depth) &#123; //递归边界 if (tree[index].size() == 0) &#123; book[depth]++; maxDepth = max(maxDepth, depth); return; &#125; //递归式 for (int i = 0; i &lt; tree[index].size(); ++i) &#123; DFS(tree[index][i], depth + 1); &#125;&#125;int main() &#123; int n, m, nodeName, num, temp; scanf(\"%d %d\", &amp;n, &amp;m); //vector&lt;int&gt;数组tree存储所有的结点信息 for (int i = 0; i &lt; m; ++i) &#123; scanf(\"%d %d\", &amp;nodeName, &amp;num); for (int j = 0; j &lt; num; ++j) &#123; scanf(\"%d\", &amp;temp); tree[nodeName].push_back(temp); &#125; &#125; //开始递归 DFS(01, 0); printf(\"%d\", book[0]); //如果depth为0，则只输出0 for (int k = 1; k &lt;= maxDepth; ++k) &#123; printf(\" %d\", book[k]); &#125;&#125; 1005 Spell It Right 重点：string 与 int 的转换 Given a non-negative integer N, your task is to compute the sum of all the digits of N, and output every digit of the sum in English. 输入格式： Each input file contains one test case. Each case occupies one line which contains an N (≤10100). 输出格式： For each test case, output in one line the digits of the sum in English words. There must be one space between two consecutive words, but no extra space at the end of a line. 输入样例： 12345 输出样例： one five 答案： /* * N最多有100位只能用string存储 * 注意最后的空格 */#include &lt;iostream&gt;#include &lt;string&gt;using namespace std;string alphabet[10] = &#123;\"zero\",\"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\"&#125;;int main() &#123; string input; int sum = 0; cin &gt;&gt; input; for (int j = 0; j &lt; input.size(); j++) &#123; sum += input[j] - '0'; &#125; string str = to_string(sum); cout &lt;&lt; alphabet[str[0] - '0']; for (int i = 1; i &lt; str.size(); ++i) &#123; cout &lt;&lt; \" \" &lt;&lt; alphabet[str[i]- '0']; &#125;&#125; 1006 Sign In and Sign Out 重点：自定义 sort 函数，string 与 int 的转换 At the beginning of every day, the first person who signs in the computer room will unlock the door, and the last one who signs out will lock the door. Given the records of signing in’s and out’s, you are supposed to find the ones who have unlocked and locked the door on that day. 输入格式： Each input file contains one test case. Each case contains the records for one day. The case starts with a positive integer M, which is the total number of records, followed by M lines, each in the format: ID_number Sign_in_time Sign_out_time where times are given in the format HH:MM:SS, and ID_number is a string with no more than 15 characters. 输出格式： For each test case, output in one line the ID numbers of the persons who have unlocked and locked the door on that day. The two ID numbers must be separated by one space. Note: It is guaranteed that the records are consistent. That is, the sign in time must be earlier than the sign out time for each person, and there are no two persons sign in or out at the same moment. 输入样例： 3CS301111 15:30:28 17:00:10SC3021234 08:00:00 11:25:25CS301133 21:45:00 21:58:40 输出样例： SC3021234 CS301133 答案： /* * 每个输入，包含进入时间与出门时间 * 取两个string，in和out，记录进门与出门时间，有小于进门或大于出门的就更新 * * 1. 读入第一组数据作为基本值，进门ID与出门ID均为当前ID * 2. 依次读取其他各组数据，若进入时间小于当前 */#include &lt;iostream&gt;#include &lt;string&gt;#include &lt;vector&gt;#include &lt;algorithm&gt;using namespace std;int toSeconds(string time) &#123; int a, b, c; a = stoi(time.substr(0,2)); b = stoi(time.substr(3, 2)); c = stoi(time.substr(6, 2)); int result = a * 3600 + b * 60 + c; return result;&#125;struct Card &#123; string ID; int inTime; int outTime;&#125;;bool earlyCmp(Card card1, Card card2) &#123; return card1.inTime &lt; card2.inTime;&#125;bool lateCmp(Card card1, Card card2) &#123; return card1.outTime &gt; card2.outTime;&#125;int main() &#123; string id, in, out; vector&lt;Card&gt; list; int num; scanf(\"%d\", &amp;num); while (num--) &#123; Card card; cin &gt;&gt; id &gt;&gt; in &gt;&gt; out; card.ID = id; card.inTime = toSeconds(in); card.outTime= toSeconds(out); list.push_back(card); &#125; sort(list.begin(), list.end(), earlyCmp); cout &lt;&lt; list[0].ID &lt;&lt; \" \"; sort(list.begin(), list.end(), lateCmp); cout &lt;&lt; list[0].ID;&#125; 1007 Maximum Subsequence Sum 重点： Given a sequence of K integers { N1, N2, …, NK }. A continuous subsequence is defined to be { Ni, Ni+1, …, Nj } where 1≤i≤j≤K. The Maximum Subsequence is the continuous subsequence which has the largest sum of its elements. For example, given sequence { -2, 11, -4, 13, -5, -2 }, its maximum subsequence is { 11, -4, 13 } with the largest sum being 20. Now you are supposed to find the largest sum, together with the first and the last numbers of the maximum subsequence. 输入格式： Each input file contains one test case. Each case occupies two lines. The first line contains a positive integer K (≤10000). The second line contains K numbers, separated by a space. 输出格式： For each test case, output in one line the largest sum, together with the first and the last numbers of the maximum subsequence. The numbers must be separated by one space, but there must be no extra space at the end of a line. In case that the maximum subsequence is not unique, output the one with the smallest indices i and j (as shown by the sample case). If all the K numbers are negative, then its maximum sum is defined to be 0, and you are supposed to output the first and the last numbers of the whole sequence. 输入样例： 10-10 1 2 3 4 -5 -23 3 7 -21 输出样例： 10 1 4 答案： /* * 求最小子序列 * 1. 每次都将整个数列对半分开，记录一个中点下标mid * 2. 计算两边的和 * 1. 如果左边的和大于0，记录left * 2. 如果右边的和大于0，记录right * 3. 如果左边的和小于0，再取对半，直到无法对半分 * 4. 同上 */#include &lt;iostream&gt;#include &lt;vector&gt;using namespace std;int left(vector&lt;int&gt; list) &#123;&#125;int main() &#123; int num, temp; vector&lt;int&gt; list; scanf(\"%d\", &amp;num); while (num--) &#123; scanf(\"%d\", &amp;temp); list.push_back(temp); &#125;&#125; /* * 对于有重叠子问题，且问题无后效性的问题，可以考虑用动态规划 * 对于这个问题，我们设A[i]为此序列的值，dp[i]为以i为结尾的最大连续子序列和，那么问题转化为求dp[i]的最大值 * 对于任一dp[i]，有以下两种情况： * 1. 此序列只有一个元素，即dp[i] = A[i] * 2. 此序列有多个元素，那么dp[i]为 dp[i-1] + A[i] 和 A[i]的较大值 * 3. 得出状态转移方程 * dp[i] = max&#123;A[i], dp[i-1] + A[i]&#125; * 4. 得出一般步骤 * 1. 输入数据 * 2. 显然，dp[0] = A[0] * 3. 随后的逐个枚举，找出最大值即可 * * 举例： * A： 15 -19 3 4 3 2 -4 -2 5 7 * dp： 15 -4 3 7 10 12 8 6 11 18 * A: 15 -5 1 2 3 * dp：15 * 可以看出，如果A[i]&lt;0，但A[i-1]+A[i]&gt;0，则仍可以计入总子序列 */#include &lt;iostream&gt;#include &lt;algorithm&gt;#include &lt;vector&gt;const int N = 10010;int dp[N], A[N];using namespace std;int main() &#123; const int N = 10010; int dp[N], A[N]; int num; scanf(\"%d\", &amp;num); for (int i = 0; i &lt; num; ++i) &#123; scanf(\"%d\", &amp;A[i]); &#125; //边界 dp[0] = A[0]; //状态转移方程 int r = 0; //标记最大值 for (int j = 1; j &lt; num; ++j) &#123; dp[j] = max(A[j], dp[j-1] + A[j]); if (dp[j] &gt; dp[r]) r = j; &#125; int l = r; int sum = 0; for (int k = r; k &gt;= 0; --k) &#123; sum += A[k]; if (sum == dp[r]) &#123; l = k; break; &#125; &#125; //如果A[i]全为负数，则dp[r] &lt; 0, 这时应特别输出 if (dp[r] &lt; 0) &#123; printf(\"0 %d %d\", A[0], A[num-1]); &#125; else &#123; printf(\"%d %d %d\", dp[r], A[l], A[r]); //注意审题，看到底要求输出的是下标还是数字本身 &#125;&#125; 1009 Product of Polynomials 重点：数组边界 This time, you are supposed to find A×B where A and B are two polynomials. 输入格式： Each input file contains one test case. Each case occupies 2 lines, and each line contains the information of a polynomial: K N1 aN1 N2 aN2 … NK aNK where K is the number of nonzero terms in the polynomial, Ni and aNi (i = 1,2,⋯,K) are the exponents and coefficients, respectively. It is given that 1≤K≤10, 0≤NK&lt;⋯&lt;N2&lt;N1≤1000. 输出格式： For each test case you should output the product of A and B in one line, with the same format as the input. Notice that there must be NO extra space at the end of each line. Please be accurate up to 1 decimal place. 输入样例： 2 1 2.4 0 3.22 2 1.5 1 0.5 输出样例： 3 3 3.6 2 6.0 1 1.6 答案： /* * 两个多项式的乘积 * * 读入两组数据， 以hash的形式存入2个数组中 * 依次取出list2的数据，与list1的每一项相乘，结果存入另一个数组 * list[exp] = coe，与每一项相乘时，exp相加，coe相乘 * 排序，输出 * */#include &lt;iostream&gt;#include &lt;vector&gt;//两个1000位数相乘，指数最大可以达到2000const int N = 2010;using namespace std;int main() &#123; double list1[N] = &#123;0.0&#125;, list2[N] = &#123;0.0&#125;, result[N] = &#123;0.0&#125;; int num,exp; double coe; scanf(\"%d\", &amp;num); while (num--) &#123; scanf(\"%d %lf\", &amp;exp, &amp;coe); list1[exp] = coe; &#125; scanf(\"%d\", &amp;num); while (num--) &#123; scanf(\"%d %lf\", &amp;exp, &amp;coe); list2[exp] = coe; &#125; //开始相乘 int tempExp; double tempCoe; for (int i = 0; i &lt; N; ++i) &#123; if (list1[i] != 0.0) &#123; for (int j = 0; j &lt; N; ++j) &#123; //list[exp] = coe，与每一项相乘时，exp相加，coe相乘 if (list2[j] != 0.0) &#123; tempExp = i + j; tempCoe = list1[i] * list2[j]; result[tempExp] += tempCoe; &#125; &#125; &#125; &#125; int count = 0; for (int k = 0; k &lt; N; ++k) &#123; if (result[k] != 0.0) count++; &#125; printf(\"%d\", count); for (int l = N - 1; l &gt;= 0 ; --l) &#123; //注意，函数边界是N，但下标取不到 if (result[l] != 0.0) &#123; printf(\" %d %.1f\", l,result[l]); &#125; &#125;&#125; 1010 Radix 重点： Given a pair of positive integers, for example, 6 and 110, can this equation 6 = 110 be true? The answer is yes, if 6 is a decimal number and 110 is a binary number. Now for any pair of positive integers N1 and N2, your task is to find the radix（进制） of one number while that of the other is given. 输入格式： Each input file contains one test case. Each case occupies a line which contains 4 positive integers: N1 N2 tag radix Here N1 and N2 each has no more than 10 digits. A digit is less than its radix and is chosen from the set { 0-9, a-z } where 0-9 represent the decimal numbers 0-9, and a-z represent the decimal numbers 10-35. The last number radix is the radix of N1 if tag is 1, or of N2 if tag is 2. 输出格式： For each test case, print in one line the radix of the other number so that the equation N1 = N2 is true. If the equation is impossible, print Impossible. If the solution is not unique, output the smallest possible radix. 输入样例1： 6 110 1 10 输出样例2： 2 输入样例2： 1 ab 1 2 输出样例2： Impossible 答案： /* * 进制转换 * 思路：进制数小于位数，将两个数转换为10进制进行比较 */#include &lt;iostream&gt;#include &lt;string&gt;#include &lt;cmath&gt;using namespace std;int trans(string input, int demical) &#123; int result = -1; int radix, exp, sum; for ( radix = 2; radix &lt; 36; ++radix) &#123; exp = 0; sum = 0; for (int i = input.size() - 1; i &gt;= 0; --i) &#123; if (input[i] &lt;= 'z' &amp;&amp; input[i] &gt;= 'a') sum += (input[i] - 'a' + 10) * pow(radix, exp); else sum += (input[i] - '0') * pow(radix, exp); exp++; &#125; if (sum == demical) &#123; result = radix; break; &#125; &#125; return result;&#125;int main() &#123; string N[3]; int tag, radix; cin &gt;&gt; N[1] &gt;&gt; N[2] &gt;&gt; tag &gt;&gt; radix; int demical = 0; int exp = 0; for (int i = N[tag].size() - 1; i &gt;= 0; --i) &#123; if (N[tag][i] &lt;= 'z' &amp;&amp; N[tag][i] &gt;='a') demical += (N[tag][i] - 'a' + 10) * pow(radix, exp); else demical += (N[tag][i] - '0') * pow(radix, exp); exp++; &#125; int result; if (tag == 1) result = trans(N[2], demical); else result = trans(N[1], demical); if (result != -1) printf(\"%d\", result); else printf(\"Impossible\");&#125; 1011 World Cup Betting 重点：数组传入函数 With the 2010 FIFA World Cup running, football fans the world over were becoming increasingly excited as the best players from the best teams doing battles for the World Cup trophy in South Africa. Similarly, football betting fans were putting their money where their mouths were, by laying all manner of World Cup bets. Chinese Football Lottery provided a “Triple Winning” game. The rule of winning was simple: first select any three of the games. Then for each selected game, bet on one of the three possible results – namely W for win, T for tie, and L for lose. There was an odd assigned to each result. The winner’s odd would be the product of the three odds times 65%. For example, 3 games’ odds are given as the following: W T L1.1 2.5 1.71.2 3.1 1.64.1 1.2 1.1 To obtain the maximum profit, one must buy W for the 3rd game, T for the 2nd game, and T for the 1st game. If each bet takes 2 yuans, then the maximum profit would be (4.1×3.1×2.5×65%−1)×2=39.31 yuans (accurate up to 2 decimal places). 输入格式： Each input file contains one test case. Each case contains the betting information of 3 games. Each game occupies a line with three distinct odds corresponding to W, T and L. 输出格式： For each test case, print in one line the best bet of each game, and the maximum profit accurate up to 2 decimal places. The characters and the number must be separated by one space. 输入样例： 1.1 2.5 1.71.2 3.1 1.64.1 1.2 1.1 输出样例： T T W 39.31 答案： /* * 寻找最大赔率方案 * 思路： * 1. 将3组数据分别存到3个数组内 * 2. 找出每一组的最大值 * 3. 输出 */#include &lt;iostream&gt;using namespace std;int find_max(double a[3]) &#123; if (a[0] &gt; a[1] ) &#123; if (a[0] &gt; a[2]) return 0; else return 2; &#125; else &#123; if (a[1] &gt; a[2]) return 1; else return 2; &#125;&#125;int main() &#123; double a[3], b[3], c[3]; char list[3] = &#123;'W', 'T', 'L'&#125;;// memset(a, 0.0, sizeof(a));// memset(b, 0.0, sizeof(a));// memset(c, 0.0, sizeof(a)); scanf(\"%lf %lf %lf\", &amp;a[0], &amp;a[1], &amp;a[2]); scanf(\"%lf %lf %lf\", &amp;b[0], &amp;b[1], &amp;b[2]); scanf(\"%lf %lf %lf\", &amp;c[0], &amp;c[1], &amp;c[2]); int mark1 = find_max(a); int mark2 = find_max(b); int mark3 = find_max(c); double result = (a[mark1] * b[mark2] * c[mark3] * 0.65 - 1) * 2; printf(\"%c %c %c %.2f\", list[mark1], list[mark2], list[mark3], result);&#125; 1012 The Best Rank 重点： To evaluate the performance of our first year CS majored students, we consider their grades of three courses only: C - C Programming Language, M - Mathematics (Calculus or Linear Algrbra), and E - English. At the mean time, we encourage students by emphasizing on their best ranks – that is, among the four ranks with respect to the three courses and the average grade, we print the best rank for each student. For example, The grades of C, M, E and A - Average of 4 students are given as the following: StudentID C M E A310101 98 85 88 90310102 70 95 88 84310103 82 87 94 88310104 91 91 91 91 Then the best ranks for all the students are No.1 since the 1st one has done the best in C Programming Language, while the 2nd one in Mathematics, the 3rd one in English, and the last one in average. 输入格式： Each input file contains one test case. Each case starts with a line containing 2 numbers N and M (≤2000), which are the total number of students, and the number of students who would check their ranks, respectively. Then N lines follow, each contains a student ID which is a string of 6 digits, followed by the three integer grades (in the range of [0, 100]) of that student in the order of C, M and E. Then there are M lines, each containing a student ID. 输出格式： For each of the M students, print in one line the best rank for him/her, and the symbol of the corresponding rank, separated by a space. The priorities of the ranking methods are ordered as A &gt; C &gt; M &gt; E. Hence if there are two or more ways for a student to obtain the same best rank, output the one with the highest priority. If a student is not on the grading list, simply output N/A. 输入样例： 5 6310101 98 85 88310102 70 95 88310103 82 87 94310104 91 91 91310105 85 90 903101013101023101033101043101059999995 6 310101 98 85 88 310102 70 95 88 310103 82 87 94 310104 91 91 91 310105 85 90 90 310101 310102 310103 310104 310105 999999 输出样例： 1 C1 M1 E1 A3 AN/A 答案： /* * 1. 构造结构体，每一门有相应的分数和名词 * 2. 读入 * 3. 将A C M E 的排名按顺序存入一个数组中，从左到右寻找最大值 * 题目没说相同分数名词相同，坑死我了 */#include &lt;iostream&gt;#include &lt;vector&gt;#include &lt;string&gt;#include &lt;algorithm&gt;#include &lt;cmath&gt;using namespace std;struct Student &#123; int ID, A, C, M, E; int rank[4];&#125;;bool cmpC(Student A, Student B) &#123; return A.C &gt; B.C;&#125;bool cmpM(Student A, Student B) &#123; return A.M &gt; B.M;&#125;bool cmpE(Student A, Student B) &#123; return A.E &gt; B.E;&#125;bool cmpA(Student A, Student B) &#123; return A.A &gt; B.A;&#125;bool cmp(Student A, Student B) &#123;&#125;void find_max(Student A) &#123; char out[4] = &#123;'A', 'C', 'M', 'E'&#125;; int maxRank = 0; for (int i = 1; i &lt; 4; ++i) &#123; if (A.rank[i] &lt; A.rank[maxRank]) &#123; maxRank = i; &#125; &#125; printf(\"%d %c\\n\", A.rank[maxRank], out[maxRank]);&#125;int if_exist(int ID, vector&lt;Student&gt; list) &#123; int result = -1; for (int i = 0; i &lt; list.size(); ++i) &#123; if (list[i].ID == ID) &#123; result = i; break; &#125; &#125; return result;&#125;int main() &#123; int N, M; vector&lt;Student&gt; list; scanf(\"%d %d\", &amp;N, &amp;M); while (N--) &#123; Student temp; double tempA; scanf(\"%d %d %d %d\", &amp;temp.ID, &amp;temp.C, &amp;temp.M, &amp;temp.E); tempA = round((temp.C + temp.M + temp.E) / 3); temp.A = tempA; list.push_back(temp); &#125; sort(list.begin(), list.end(), cmpC); list[0].rank[1] = 1; int rank = 1; for (int i = 1; i &lt; list.size(); i++) &#123; if (list[i].C == list[i-1].C) &#123; list[i].rank[1] = rank++; &#125; else &#123; list[i].rank[1] = ++rank; &#125; &#125; sort(list.begin(), list.end(), cmpM); list[0].rank[2] = 1; rank = 1; for (int i = 1; i &lt; list.size(); i++) &#123; if (list[i].M == list[i-1].M) &#123; list[i].rank[2] = rank++; &#125; else &#123; list[i].rank[2] = ++rank; &#125; &#125; sort(list.begin(), list.end(), cmpE); list[0].rank[3] = 1; rank = 1; for (int i = 1; i &lt; list.size(); i++) &#123; if (list[i].E == list[i-1].E) &#123; list[i].rank[3] = rank++; &#125; else &#123; list[i].rank[3] = ++rank; &#125; &#125; sort(list.begin(), list.end(), cmpA); list[0].rank[0] = 1; rank = 1; for (int i = 1; i &lt; list.size(); i++) &#123; if (list[i].E == list[i-1].E) &#123; list[i].rank[0] = rank++; &#125; else &#123; list[i].rank[0] = ++rank; &#125; &#125; int tempID; while (M--) &#123; scanf(\"%d\", &amp;tempID); int exist = if_exist(tempID, list); if (exist != -1) &#123; find_max(list[exist]); &#125; else &#123; printf(\"N/A\\n\"); &#125; &#125;&#125; 1013 Battle Over Cities 重点： It is vitally important to have all the cities connected by highways in a war. If a city is occupied by the enemy, all the highways from/toward that city are closed. We must know immediately if we need to repair any other highways to keep the rest of the cities connected. Given the map of cities which have all the remaining highways marked, you are supposed to tell the number of highways need to be repaired, quickly. For example, if we have 3 cities and 2 highways connecting city1-city2 and city1-city3. Then if city1 is occupied by the enemy, we must have 1 highway repaired, that is the highway city2-city3. 输入格式： Each input file contains one test case. Each case starts with a line containing 3 numbers N (&lt;1000), M and K, which are the total number of cities, the number of remaining highways, and the number of cities to be checked, respectively. Then M lines follow, each describes a highway by 2 integers, which are the numbers of the cities the highway connects. The cities are numbered from 1 to N. Finally there is a line containing K numbers, which represent the cities we concern. 输出格式： For each of the K cities, output in a line the number of highways need to be repaired if that city is lost. 输入样例： 3 2 31 21 31 2 3 输出样例： 100 答案： 1014 Waiting in Line 重点： Suppose a bank has N windows open for service. There is a yellow line in front of the windows which devides the waiting area into two parts. The rules for the customers to wait in line are: The space inside the yellow line in front of each window is enough to contain a line with M customers. Hence when all the N lines are full, all the customers after (and including) the (NM+1)st one will have to wait in a line behind the yellow line. Each customer will choose the shortest line to wait in when crossing the yellow line. If there are two or more lines with the same length, the customer will always choose the window with the smallest number. Customer i will take Ti minutes to have his/her transaction processed. The first N customers are assumed to be served at 8:00am. Now given the processing time of each customer, you are supposed to tell the exact time at which a customer has his/her business done. For example, suppose that a bank has 2 windows and each window may have 2 custmers waiting inside the yellow line. There are 5 customers waiting with transactions taking 1, 2, 6, 4 and 3 minutes, respectively. At 08:00 in the morning, customer1 is served at window1 while customer2 is served at window2. Customer3 will wait in front of window1 and customer4 will wait in front of window2. Customer5 will wait behind the yellow line. At 08:01, customer1 is done and customer5 enters the line in front of window1 since that line seems shorter now. Customer2 will leave at 08:02, customer4 at 08:06, customer3 at 08:07, and finally customer5 at 08:10. 输入格式： Each input file contains one test case. Each case starts with a line containing 4 positive integers: N (≤20, number of windows), M (≤10, the maximum capacity of each line inside the yellow line), K (≤1000, number of customers), and Q (≤1000, number of customer queries). The next line contains K positive integers, which are the processing time of the K customers. The last line contains Q positive integers, which represent the customers who are asking about the time they can have their transactions done. The customers are numbered from 1 to K. 输出格式： For each of the Q customers, print in one line the time at which his/her transaction is finished, in the format HH:MM where HH is in [08, 17] and MM is in [00, 59]. Note that since the bank is closed everyday after 17:00, for those customers who cannot be served before 17:00, you must output Sorry instead. 输入样例： 2 2 7 51 2 6 4 3 534 23 4 5 6 7 输出样例： 08:0708:0608:1017:00Sorry 答案： /* * queue的应用 * N个窗口，每个队列容纳M个人，K位顾客，Q个计算 * 不需要构建顾客结构体，构建窗口的结构体，包含等待队列，等待人数，结束时间，队首出队时间 * * 如何创建不定个窗口？创建窗口结构体数组，存入vector中 * 对于17：00后还没有出队的顾客，输出Sorry * 将时间按分钟记录，最后转为小时计数 * 1. 输入数据，存入vector&lt;Window&gt; list中 * 2. cost存入另一个quene&lt;int&gt; queue，逐个取出 * 3. 开始模拟，对于前NM个，直接依次进队列；从NM+1开始，每次从costList中取出一个，取待定人数最少，序号最小的队列存入，并更新相应Window的over_time * 4. 如果模拟过程中，某个队列满了，则执行出队操作， * 5. 将所有的出队时间存入一个vector中， */#include &lt;iostream&gt;#include &lt;queue&gt;using namespace std;struct Window &#123; int in_line_people = 0; int over_time = 0; queue&lt;int&gt; line;&#125;;//找到队列中的应该进入的队列int find_queue(vector&lt;Window&gt; list) &#123; int result = 0; for (int i = 1; i &lt; list.size(); ++i) &#123; if (list[i].in_line_people &lt; list[result].in_line_people) result = i; &#125; return result;&#125;int main() &#123; int N, M, K, Q; int time = 0; //全局变量，表示当前时间 scanf(\"%d %d %d %d\", &amp;N, &amp;M, &amp;K, &amp;Q); vector&lt;Window&gt; list; queue&lt;int&gt; costList; vector&lt;int&gt; query; //初始化各个窗口 while(N--) &#123; Window tempWindow; tempWindow.in_line_people = M; list.push_back(tempWindow); &#125; int tempQuery = 0; while (Q--) &#123; scanf(\"%d\", &amp;tempQuery); query.push_back(tempQuery); &#125; //读入各个cost int tempCost = 0; while (K--) &#123; scanf(\"%d\", &amp;tempCost); costList.push(tempCost); &#125; //开始模拟 //对于前NM个 int temp = min(N*M, K); while (temp--) &#123; for (int i = 0; i &lt; ; ++i) &#123; &#125; &#125;&#125; 1015 Reversible Primes 重点： A reversible prime in any number system is a prime whose “reverse” in that number system is also a prime. For example in the decimal system 73 is a reversible prime because its reverse 37 is also a prime. Now given any two positive integers N (&lt;105) and D (1&lt;D≤10), you are supposed to tell if N is a reversible prime with radix D. 输入格式： The input file consists of several test cases. Each case occupies a line which contains two integers N and D. The input is finished by a negative N. 输出格式： For each test case, print in one line Yes if N is a reversible prime with radix D, or No if not. 输入样例： 73 1023 223 10-2 输出样例： YesYesNo 答案： 1. /* * 1. 判断原数是否为素数，结果存入一个vector * 2. 将原数转换为D进制数，再反转，再转为十进制数 * 3. 再判断其是否为素数，结果存入另一个vector * 4. 同一位置都为true，输出Yes，否则输出No */#include &lt;stdio.h&gt;#include &lt;vector&gt;#include &lt;cmath&gt;#include &lt;iostream&gt;using namespace std;bool isPrime(int a) &#123; if (a == 1) //必须有，题目中N可能取到1 return false; int upper = int(sqrt(a * 1.0)); //重要，使用自动类型转换，不使用不一定出问题，但建议加上 for (int i = 2; i &lt;= upper; ++i) &#123; //必须可以取到平方根 if (a % i == 0) &#123; return false; &#125; &#125; return true;&#125;int reverse(int number, int radix) &#123; vector&lt;int&gt; list; int result = 0; while (number) &#123; list.push_back(number % radix); number /= radix; &#125; for (int i = 0; i &lt; list.size(); i++) &#123; result = result * radix + list[i]; &#125; return result;&#125;int main() &#123; int number, radix, re; while (scanf(\"%d\", &amp;number) != EOF) &#123; if (number &lt; 0) break; scanf(\"%d\", &amp;radix); //必须两个都读完再判断 if (isPrime(number) == false) &#123; printf(\"No\\n\"); continue; &#125; re = reverse(number, radix); printf(\"%s\", isPrime(re) ? \"Yes\\n\" : \"No\\n\"); &#125;&#125;2./* * 1. 判断原数是否为素数，结果存入一个vector * 2. 将原数转换为D进制数，再反转，再转为十进制数 * 3. 再判断其是否为素数，结果存入另一个vector * 4. 同一位置都为true，输出Yes，否则输出No */#include &lt;stdio.h&gt;#include &lt;vector&gt;#include &lt;cmath&gt;#include &lt;iostream&gt;using namespace std;bool isPrime(int a) &#123; if (a == 1) return false; int upper = int(sqrt(a * 1.0)); for (int i = 2; i &lt;= upper; ++i) &#123; //重要，使用自动类型转换，不使用不一定出问题，但建议加上 if (a % i == 0) &#123; return false; &#125; &#125; return true;&#125;int reverse(int number, int radix) &#123; int arr[100]; int i = 0, result = 0; while (number) &#123; arr[i++] = number % radix; number /= radix; &#125; for (int j = 0; j &lt; i; j++) &#123; result = result * radix + arr[j]; &#125; return result;&#125;int main() &#123; int number, radix; while (cin &gt;&gt; number) &#123; if (number &lt; 0) break; cin &gt;&gt; radix; if (isPrime(number) &amp;&amp; isPrime(reverse(number, radix))) &#123; cout &lt;&lt; \"Yes\" &lt;&lt; endl; &#125; else &#123; cout &lt;&lt; \"No\" &lt;&lt; endl; &#125; &#125;&#125;","categories":[{"name":"PAT甲级","slug":"PAT甲级","permalink":"http://yoursite.com/categories/PAT%E7%94%B2%E7%BA%A7/"}],"tags":[{"name":"PAT","slug":"PAT","permalink":"http://yoursite.com/tags/PAT/"}]},{"title":"标日初级上","slug":"标日初级上","date":"2019-11-12T02:00:00.000Z","updated":"2019-11-14T11:44:55.058Z","comments":true,"path":"2019/11/12/标日初级上/","link":"","permalink":"http://yoursite.com/2019/11/12/%E6%A0%87%E6%97%A5%E5%88%9D%E7%BA%A7%E4%B8%8A/","excerpt":"中日交流标准日本语初级上册","text":"中日交流标准日本语初级上册 平假名 1. 音図 あ い う え お あ a い i う u え e お o あ か ka き ki く ku け ke こ ko さ さ sa し shi す su せ se そ so た た ta ち chi つ tsu て te と to な な na に ni ぬ nu ね ne の no は は ha ひ hi ふ fu へ he ほ ho ま ま ma み mi む mu め me も mo や や ya ゆ yu よ yo ら ら ra り ri る ru れ re ろ ro わ わ wa を wo 2. 浊音 在ｋ、ｓ、ｔ、ｈ行加点、圈之后，发生音变。 a i u e o が行 g が ga ぎ gi ぐ gu げ ge ご go ざ行 z ざ za じ ji ず zu ぜ ze ぞ zo だ行 d だ da ぢ ji づ zu で de ど do ば行 b ば ba び bi ぶ bu べ be ぼ bo ぱ行 p ぱ pa ぴpi ぷ pu ぺ pe ぽ po 3. 拗音 在假名后加ゃ、ゅ、ょ，两个假名构成一拍。 ya yu yo ｋ きゃ kya きゅ kyu きょ kyo ｓ しゃ sya しゅ syu しょ syo ｔ ちゃ tya ちゅ tyu ちょ tyo ｎ にゃ nya にゅ nyu にょ nyo ｈ ひゃ hya ひゅ hyu ひょ hyo ｍ みゃ mya みゅ myu みょ myo ｒ りゃ rya りゅ ryu りょ ryo ｇ ぎゃ gya ぎゅ gyu ぎょ gyo ｚ じゃ zya じゅ zyu じょ zyo ｂ びゃ bya びゅ byo びょ byo ｐ ぴゃ pya ぴゅ pyu ぴゅ pyo 4. 拨音 ん不能放在词头。根据前面词，发出n/m/ng的音。 发音 例子 ｍ さんぽ、しんぶん ｎ もんだい、しんねん ng こんばんは、へんか 5. 促音 っ（小写つ），っ的发音长度是一拍。如： おっと 丈夫 おと 声音 さっか 作家 さか 坡 ぶっか 物价 ぶか 武士 かっさい 全部 かさい 伞 6. 长音 平假名在母音的后面加あ、い、う、え、お等音则变成原来的2倍。 片假名在后面加“－”符号表记长音。例： おかあさん、おとうさん おじさん、おじいさん おばさん、おばあさん とり、とおり 后面可加的表长音平假名 例句 あ段 あ ああ、かあ、だあ い段 い いい、さい、ぴい う段 うう、むえ、ちゅう え段 え、い ええ、こえ、ちゅえ お段 お、う おお，おう 片假名 1. 音図 a i u e o ア a イ i ウ u エ e オ o ｋ カ ka キ ki ク ku ケ ke コ ko ｓ サ sa シ shi ス su セ se ソ so ｔ タ ta チ chi ツ tsu テ te ト to ｎ ナ na ニ ni ヌ nu ネ ne ノ no ｈ ハ ha ヒ hi フ fu ヘ he ホ ho ｍ マ ma ミ mi ム mu メ me モ mo ｙ ヤ ya ユ yu ヨ yo ｒ ラ ra リ ri ル ru レ re ロ ro ｗ ワ wa ヲ o ン n 2. 浊音 在ｋ、ｓ、ｔ、ｈ行加点、圈之后，发生音变。 a i u e o ｇ ガ ga ギ gi グ gu ゲ ge ゴ go ｚ ザ za ジ ji ズ zu ゼ ze ゾ zo ｄ ダ da ヂ ji ヅ zu デ de ド do ｂ バ ba ビ bi ブ bu ベ be ボ bo ｐ パ pa ピ pi プ pu ペ pe ポ po 3. 拗音 在假名后加ゃ、ゅ、ょ，两个假名构成一拍。 ya yu yo ｋ キャ キュ キョ ｓ シャ シュ ショ ｔ チャ チュ チョ ｎ ニャ ニュ ニョ ｈ ヒャ ヒュ ヒョ ｍ ミャ ミュ ミョ ｒ リャ リュ リョ ｇ ギャ ギュ ギョ ｚ ジャ ジュ ジョ ｂ ビャ ビュ ビョ ｐ ピャ ピュ ピョ 4. 拨音 ン不能放在词头。根据前面词，发出n/m/ng的音。 5. 促音 ッ（小写ツ），ッ的发音长度是一拍。例：カット 6. 长音 片假名后面加“－”符号表记长音。例：コンピュータ 读音 1. 声调 类型 读音 0调 低高高高 1调 高低低低 n调 低…第n个音高…低 2. 音读与训读 音读（おんよみ）：按照中国的发音去读的汉字。 训读（くんよみ）：按照日文原有发音去读的汉字。 第一課 李さんは 中国人です 内容：判断句 李さんは中国人です。小李是中国人。 结构：名词 + は + 名词 + です。，“～是～”，肯定判断句 森さんは学生ではありません。小森不是学生。 结构： 名词 + は + 名词 + ではありません 名词 + は + 名词 + じゃありますん 名词 + は + 名词 + じゃない 表示“～不是～”，否定判断句。 林さんは日本人ですか。小森是日本人吗？ 结构：名词 + は + 名词 + ですか。，“～是～吗？”，一般疑问句，对国籍、年龄、姓名等都可以进行提问。 肯定回答： はい、森さんは日本人です。 はい、そうです。 否定回答： いいえ、森さんは日本人ではありません。 いいえ、ちがいます。 いいえ、そうではありますん。 李さんはJC企画の社員です。小李是JC策划公司的职员。 结构：名词 + の + 名词， 连接两个名词时，中间加の，表示“的”。 关于人称 人称 第一人称 一般用语 わたし 男性用语 僕（ぼく）俺（おれ） 女性用语 あたし 人称 第二人称 一般用语 あなた 俗语 君（きみ）お前（おまえ）あんた 人称 第三人称 男性 彼（かれ） 女性 彼女（かのじょ） 称呼语 类别 形式 举例 一般 ～さん 王さん 尊敬 ～さま（様） お客様（おきゃくさま） 男性 ～くん（君） 田中くん 女子、子供、ペット ～ちゃん 純子ちゃん 第二課 これは本です 内容：使用指示代词作判断句 これ：离说话人最近的事物。 それ：距听话人最近的事物。 あれ：离说话人和听话人都比较远的事物。 これ、それ、あれ被称为连体词，即连接体言的词： 词性 内容 体言 名词、代词、数量词 用言 动词、形容词 これは本です。这是书。 结构：これ、それ、あれは＋名词です，“这是～”，以代词作主语的判断句。 疑问词：どれ。 これは本ではありません。这不是书。 结构：これ、それ、あれは＋名词ではありません，“这不是～”，否定句。 これは本ですか。这是书吗？ 结构：これ、それ、あれは＋名词ですか，“这是～吗？”，一般疑问句。 それは何ですか。那是什么。 结构：これ、それ、あれは + &lt;u&gt;何&lt;/u&gt;ですか，“这是什么？”，特殊疑问句。 あれはだれの傘ですか。这是谁的雨伞？ 特殊疑问词だれ，“谁”。 人称疑问代词 举例 普通 （ふつう） だれですか。 礼仪（れいぎ） どなたですか。 尊敬（そんけい） どちら様ですか。 更尊敬的句式： ​ どなたでしょうか？ このカメラはスミスさんのですか。这个相机是史密斯的（相机）吗？ 结构：人名 + の，表示物的所属关系，“～的”。 疑问词：だれの。 どれ／どの どれ、どの是在三个以上的事物中，不能确定哪一个时所用的疑问句。 单独使用时用どれ，修饰名词时用どの。 ​ 森さんの かばんは どれ ですか。 ​ 小野さんの 机は どの つくえ ですか。 かた あのかた は田中さんです，对人称的敬语。 询问年龄 何歳（なんさい）ですか。 何歳？ おいくつですか。 いくつ？ 亲属的称谓 提及自己的亲属，讲述时用 提及别人的亲属、直呼自己亲属时用，有尊敬成分 祖父 / 外祖父：祖父（そふ） おじいさん 祖母：祖母（そぼ） おばあさん 父母：両親（りょうしん） ご両親（ごりょうしん） 父亲：父（ちち） お父さん（おとうさん） 母亲：母（はは） お母さん（おかあさん） 儿子：息子（むすこ） 息子さん（むすこさん） 女儿：娘（むすめ） 娘さん（むすめさん）/ お嬢さん（おじょうさん） 兄弟：兄弟（きょうだい） ご兄弟（ごきょうだい） 哥哥：兄（あに） お兄さん（おにいさん） 姐姐：姉（あね） お姉さん（おねえさん） 弟弟：弟（おとうと） 弟さん（おとうとさん） 妹妹：妹（いもうと） 妹さん（いもうとさん） 伯伯 / 叔叔 / 舅舅 / 姑父：おじ おじさん 伯母 / 婶婶 / 姑姑 / 舅妈：おば おばさん 100以下的数字 数字 平假名 数字 平假名 0.1 れいてんいち 7 しち／なな 2／3 さんぶんのに 8 はち 0 れい／ぜろ 9 く／きゅう 1 いち 10 じゅう 2 に 11 じゅういち 3 さん 20 にじゅう 4 し／よん 30 さんじゅう 5 ご 100 ひゃく 6 ろく 特殊的年龄 年龄 叫法 1岁 １歳（いっさい） 8岁 ８歳（はっさい） 10岁 １０歳（じゅっさい） 20岁 ２０歳（はたち） 第三課 ここはデパートです 内容：表示场所的代词 ここ：这里。（离自己近的地方） ＝こちら（更加礼貌） そこ：那里。（离对方近的地方） ＝そちら（更加礼貌） あそこ：那里。（离两者都远的地方）＝あちら（更加礼貌） ここはデパートです。这里是百货商店。 结构：ここ、そこ、あそこは＋名词です，“这里是～”，表示自己的位置。 疑问词：どこ／どちら。 かばん売り場は１階ですか、２階ですか。 卖包的柜台在一楼还是在二楼？ 结构：名词 + は + 名词 + ですか，名词 + ですか，选择疑问句。 回答：名词 + です。 これはいくらですか。这个多少钱？ 结构：名词 + は + いくらですか 特殊疑问词: いくら：多少钱。 こちら、そちら、あちら用法总结 方向， ～边 こちらへどうぞ。 電話はこちらです。電話わここです。 指人 こちらはスミスさんです。 ここ、そこ、あそこ、どこ的礼貌形式 お国はどちらですか。 ご出身はどちらですか。 こちら、そちら、どちら可表示双方中的一方，二选一 こちらこそ 100以上的数字 数字 平假名 数字 平假名 100 ひゃく 2000 にせん 101 ひゃくいち 2013 にせんじゅうさん 200 にひゃく 3000 さんぜん 300 さんびゃく 4000 よんせん 400 よんひゃく 5000 ごせん 500 ごひゃく 6000 ろくせん 600 ろっぴゃく 7000 ななせん 700 ななひゃく 8000 はっせん 800 はっぴゃく 9000 きゅうせん 900 きゅうひゃく 10,000 いちまん 1000 せん 100,000 じゅうせん 1001 せんいち 1,000,000 ひゃくせん 9002 きゅうせん に 100,000,000 いっせんまん 9020 きゅうせん にじゅう 9200 きゅうせん にひゃく 亿 おく 兆 ちょう 第四課 部屋に机といすがあります 内容：表示存在 あります：用于花、草、桌子等不具有生命的事物； います：用于人、动物、昆虫等有生命的事物。 部屋に机といすがあります。房间里有桌子和椅子。 结构： 名词（场所）に + 名词（物）が＋あります 名词（场所）に + 名词（人）が**＋**います。 表示 “～有～”，表示某地存在某物。 助词と：名词 + と + 名词，相当于**“和”**。 机の上に猫がいます。桌子上有猫。 结构：の上，“在～上面”，表示具体位置。 ​ 名词 + の + 上（うえ） 在～之上 ​ 名词 + の + 下 （した） 在～之下 ​ 名词 + の + 前（まえ〉 在～之前 ​ 名词 + の + 中（なか） 在～里面 ​ 名词 + の + 後ろ（うしろ） 在～后面 ​ 名词 + の + 隣（となり） 在～旁边 ​ 名词 + の + 外（そと） 在～之外 だれもいません。谁也不在。 结构：疑问词(だれ/何) + も，“谁也（不）”，表示全面否定。 です与ます的区别 ます是叙述句接动词连用形结尾的，です是判断句接名词结尾的。 这两个都用于敬体句。 となり（隣） 和 よこ（横） となり比よこ更严格，表示平行的并排，两者紧挨着中间没有别的东西； よこ不那么严格； となり一般为同类事物，よこ更随意，可为不同类事物。 が与は的初级区别 日语靠助词表达句意，而不靠顺序。 在存在句中，“が”强调人或物品的位置，重点放在“位置”。 而“は”强调人或物品在哪里，强调存在。 疑问词做主语时，は要改为が。 だれ は 部屋に いますか。 错 だれ が 部屋に いますか。 对 が还表示情感上的喜恶： 私 は 虫 が 怖い。 实际上，日语中的助词可以暂时分为两个梯队： **第一梯队：**は、も。均可以增加句意。 **第二梯队：**に、が、と等。 第一梯队的助词都可以加到第二梯队助词之后，增加句意或起强调作用。 当は加到が后面，表示强调的含义之时，が就必须省略。 部屋に 猫が います。 为了强调猫的存在，我们将猫が提前，并用は修饰，起强调作用，同时省略が。 ​ 猫（が）は 部屋に います。 第五課 森さんは７時に起きます 内容：动词的过去、一般、将来 森さんは先週休みました。小森上周休息了。 现在，未来发生的事情，以及表达习惯性动作，状态： 结构： 动词 + ます（肯定） 动词 + ません（否定） 动词 + ますか（疑问） 森さんは７時に起きます。小森一般早上7点起床。 过去发生的事情： 结构： 动词 + ました（肯定） 动词 + ませんでした（否定） 动词 + ましたか（疑问） 具体时间后面，一定要加助词“に”。 结构：名词 + 时间 + に + 动词 表示动作发生的时间时，要在具体的时间词语后面加に，如“3時に” 森さんは 7時 に 起きます。 “今、昨日、今日、明日、先週”等词后不能加“に”。 試験はいつ始まりますか。考试几点开始？ 结构：いつ + 动词 + ますか，表示将来发生。 私は九時から五時まで働きます。我9点到5点工作。 结构：～から….～まで，表达时间间隔 “从～起，到～为止”。 疑问句总结 疑问句 平假名 什么？ 何 （なん） 哪里？ どお 谁？ 誰（だれ） 哪个？ どれ（三选一）/ どじら（二选一） 多少钱？ いくら 多少岁？ ［お」いくつ 星期表达 星期 平假名 记忆 日曜日 星期日 にちようび 不用记 月曜日 星期一 げつようび 月亮只有一个，星期一 火曜日 星期二 かようび 火有两点，星期二 水曜日 星期三 すいようび 三点水，星期三 木曜日 星期四 もくようび 木有四笔，星期四 金曜日 星期五 きんようび 周五发工资（お金），星期五 土曜日 星期六 どようび 周六约会然后吃土，星期六 何曜日 星期几 なんようび 相对日期表达 前 昨 今 明 后 每 日 前天 おととい 昨天 きのう （昨日） 今天 きょう （今日） 明天 あした （明日） 后天 あさって 每天 まいにち 早 前天早晨 おとといの朝 昨天早晨 きのうのあさ 昨日の朝 今天早晨 けさ （今朝） 明天早晨 あしたのあさ 明日の朝 后天早晨 あさっての朝 每天早晨 まいあさ （毎朝） 晚 前天晚上 おとといの晩 （ばん） 昨天晚上 ゆうべ （昨夜） 今天晚上 こんばん （今晩） 明天晚上 あしたのばん （明日の晩） 后天晚上 あさっての晩 每天晚上 まいばん （毎晩） 星期 上上个星期 せんせしゅう （先々週） 上个星期 せんしゅう （先週） 这个星期 こんしゅう （今週） 下个星期 らいしゅう （来週） 下下个星期 さらいしゅう （再来週） 每个星期 まいしゅう （毎週） 月 上上个月 せんせんげつ （先々月） 上个月 せんげつ （先月） 这个月 こんげつ （今月） 下个月 らいげつ （来月） 下下个月 さらいげつ （再来月） 每个月 まいつき （毎月） 年 前年 おととし 去年 きょねん （去年） 今年 ことし （今年） 明年 らいねん （来年） 后年 さらいねん （再来年） 每年 まいとし （毎年） 小时表达 时 平假名 时 平假名 1時 いちじ 7時 しちじ 2時 にじ 8時 はちじ 3時 さんじ 9時 くじ 4時 よじ 10時 じゅうじ 5時 ごじ 11時 じゅういちじ 6時 ろくじ 12時 じゅうにじ 0時 れいじ 何時 なんじ 分钟表达 促音和拨音后的ふ浊化为ぷ。 分钟 平假名 分钟 平假名 1分 いっぷん 7分 ななふん 2分 にふん 8分 はっぷん 3分 さんぷん 9分 きゅうふん 4分 よんぷん 10分 じゅっぷん 5分 ごふん 11分 じゅういっぷん 6分 ろっぷん 15分 じゅうごふん 30分 さんじゅっぷん、はん 45分 よんじゅうごふん 何分 なんぷん 日期表达 日期 平假名 日期 平假名 1 ついたち 16 じゅうろくにち 2 ふつか 17 じゅうしちにち 3 みっか 18 じゅうはちにち 4 よっか 19 じゅうくにち 5 いつか 20 はつか 6 むいか 21 にじゅうにちにち 7 なのか 22 にじゅうににち 8 ようか 23 にじゅうさんにち 9 ここのか 24 にじゅうっか 10 とおか 25 にじゅうごにち 11 じゅういちにち 26 にじゅうろくにち 12 じゅうににち 27 にじゅうしちにち 13 じゅうさんにち 28 にじゅうはちにち 14 じゅうよっか 29 にじゅうくにち 15 じゅうごにち 30 さんじゅうにち 31 さんじゅういちにち 月份表达 月份 平假名 月份 平假名 1月 いちがつ 7月 しちがつ 2月 にがつ 8月 はちがつ 3月 さんがつ 9月 くがつ 4月 しがつ 10月 じゅうがつ 5月 ごがつ 11月 じゅういちがつ 6月 ろくがつ 12月 じゅうにがつ 何月 なんがつ 第六課 吉田さんは来月中国へ行きます 内容：助词へ的使用，表交通手段助词で 吉田さんは来月中国へ行きます。吉田下个月去（往）中国。 **表达方向，行为的目的地的助词“へ”：往～ ** 结构：名词（场所）へ + 动词 这里 “へ” 读作 “え”。 李さんは先月北京から日本まで来ました。小李上个月从北京回到了日本。 表达出发点的助词“から”：从～ 表达终点的助词“まで”：到～ 二者可拆分使用； 结构：名词（场所） + から + 名词（场所）+ まで + 动词 森さんは東京から広島まで新幹線で行きます。小森坐新干线从东京去广岛。 表达工具、手段、方式、方法、交通手段的助词“で”： 用～ 结构：名词（交通工具） + で + 动词 如果步行，可以用歩いて（あるいて），此时不用加で。 小野さんは友達と帰りました。小野和朋友一起回来了。 表达共同的助词“と”：和～ 结构：名词[人]+ と 如果放在两个名词之间，则两者同等地位，如：私 と ヒムさん…； 如果没有放在两个名词之间，则这里的两个名词有主次之分，如：私は キムさん と…，这里强调的是“私”； 如果无人伴随，可以用：一人で（ひとりで）。 举例： ​ 部屋にだれがいますか。 私とキムさん。 ​ 一人で帰りますか。 わたしは キムさんと。 **注意：**へ和まで的作用类似，但へ强调目的地，まで强调过程。 御（ご、お） 音读前用**“ご”，如ご兄弟**； 训读前用**“お”**，如お友達。 特例： お誕生日，誕生日本身是音读，但这里用了お お国 お電話 美化语：お茶、お手洗い 第七課 李さんは毎日コーヒーを飲みます 内容：表动作对象助词を，动作进行场所で 李さんは毎日コーヒーを飲みます。小李每天喝咖啡。 宾语后接助词“を”，表示动作的对象。 结构：名词 + を + 动词 ​ 李さん 毎日 コーヒー を 飲みます。 这里的“を”读作“お”。 李さんは図書館で勉強します。小李在图书馆学习。 **表达动作进行场所的助词“で”： 在～ ** 结构：名词 + で + 动词 存在的场所和动作进行的场所在汉语里都用“在”来表示，但在日语里前者为**“に”，后者为“で”**。 具体的时间和具体的地点后面均用**“に”**。 私は毎日パンかお粥を食べます。我每天吃面包或稀饭。 **对几个名词中进行选择时，名词和名词之间用助词“か”，表示“或者”。 ** 结构：名词 + か + 名词 コーラとケーキをください。请给我可乐和蛋糕。 **买东西或点菜时常用句：请给我～ ** 结构：名词 + をください 会社の別荘 も たくさん あります。 原句应为：XX に 会社の別荘 が たくさん あります。 当句中有も的时候，も会替代掉原本的副词如が等，意义不变。 これから 从现在起，今后 有两个意思： be going to do ：これから 食べます。 from now ：これから 煙草を やめます。 じゃあ 相当于汉语的**“那么”**，用于接过别人的话题发表自己的看法，或中断谈话时使用； じゃあ 是比较随便的说法，正式场合要用“でわ”。 寒暄语 平假名 释义 いってらっしゃい 走好 いってまいります 我走了 いってきます 我走了（较随意） おかえりなさい(お帰りなさい） 你回来了 いらっしゃいませ 欢迎光临 いらっしゃい 欢迎光临（较不正式） かしこまりました 我明白了（较正式） お邪魔します 打扰了 ください 给我 いただきます 我开动了 ごちそうさまでした 谢谢款待 よろしくお願いします 请多关照 “何”的读法—— なん 和 なに 何的读法由后续音节来决定； なん 的读音较普遍，需要着重记忆 なに 的读音。 何 后续音节 例句 なに と 何 と 何 をかいますか。 なに が あそこに 何 がありますか。 なに を 何 をたべますか。 なに / なん で 何で会社へ行きますか。 なん の それわ 何 の本ですか。 なに も 何 もできません。 なん 时刻、星期等 李さんは 何 時に来ますか。 第八課 私は日本語で手紙を書きます 内容：授受关系 李さんは明日中島さんに会います。小李明天见中岛先生。 结构：名词[人]+ に + あいます 像“会います”这样的有方向性的动作，动作方向的对象用助词**“に”**表示。 类似的动词： 資料を送ります。 車を貸します。 料理をならいます。 電話をかけます。 李さんは電話を掛けました。 小李打电话。 李さんに電話を掛けました。 给小李打电话。 お金をかります。 日本語を教えます。 如果对象不是人，而是集团、地点时，可以使用“へ / から”，表达目的或来源。 ​ 学校に / へ 電話を掛けました。 ​ 会社に / へ 資料を送ります。 ​ 銀行に / から お金を借りました。 多助词连用: ​ 学校で先生に英語を習いました。 わたしは小野さんにお土産をあげました。我给小野礼物。 结构：名词[人] + は + 名词[人] + に + 名词（物）+ を + あげます “我”给他人某物。 “あげます”相当于中文的“给”， 用于物品以**“第一人称→第二人称→第三人称”或“第三人称→第三人称”**形式的移动时使用。 可理解为从圈内向外或圈内相互授予时用“あげます”。 当第三人称的其中一人时说话人的亲戚时，按说话人的立场处理。 物品用助词**“を”表示，接收者用助词“に”**表示。 “あげます”只是一种描述，面对面使用时有一种强加的意味，此时应使用“どうぞ”或者“どうですか”。 私は小野さんに辞書をもらいました。我从小野那儿得到了字典。 结构：名词[人] + は + 名词[人] + に + 名词（物）+ を + もらいます “もらいます”与“あべます”相反，从圈外向内部或圈内相互授予时使用，表示得到。 表示物品以**“第三人称→第二人称→第一人称”或“第三人称→第三人称”**形式的移动时使用， 相当于汉语的**“得到”，“接受”**的意思。 物品同样用**“を”表示，相反的，赠送者用“に”或“から”**表示。 如果给予的一方是“会社”或“学校”等组织或团体时，则只能使用“から”。 当第三人称的其中一人时说话人的亲戚时，按说话人的立场处理。 注意： 学校から 申し込み表 をもらいました。 如果句中地点既是发放地点，也是发放单位，则既可以使用“から”也可以使用“で”，但语义稍有不同； “から”表示 を 后地点就是发放的单位， “で”表示 を 后只是发放的地点。 駅からパンフレットをもらいました。 如果句中地点只是发放地点，而不是发放单位的话，不能使用“から”而只能使用表示动作发生场所的“で”。 李さんは日本語で手紙を書きます。小李用日语写信。 **表达工具或原材料的助词“で”：用～ **。 结构：名词 + で + 动词 で的用法总结：交通手段、动作进行场所、工具或原材料。 もう帰りましたよ。已经回去了。 结构：もう + 动词ましたよ。 表示“完了”的助词“もう”：已经～ 表示告知、通知、轻微的警告等助词“よ”。 “さっき”与“たった今”的区别 单词 释义 たった今 刚刚 さっき 刚才 要说明的事离现在非常近的时候用“たったいま”，稍早一些用“さっき”； “たった今”比“さっき”稍正式一些。 还有一个表示“最近”的单词“さいきん”，不能表示将来，只能表示过去到现在的一段时间。 さっき長嶋さんに電話をもらいました。 刚才收到了长岛先生的电话。 结构：名词[人] + に + [表示通信手段的名词] + を + もらいます 这里“…的电话”只能用“に”而不能用“の”。 第九課 四川料理は辛いです 内容：形容词的现在、过去和否定 一类形容词：以い结尾的形容词，做谓语时词尾加です； 二类形容词：不是以い结尾的形容词，做谓语时词尾加だ，但一般会省略。 形似一类形容词的二类形容词： 单词 释义 嫌い 讨厌 綺麗（きれい） 美丽 四川料理は辛いです。四川菜很辣。 一类形容词作谓语 结构：名词 + は + 一类形容词 + です このスープはあまり熱くないです。这个汤不那么热。 一类形容词的否定形式：将一类形容词词尾的 “い” 变成 “く”。 熱い 变为否定形式： 熱くないです。（い变成く，加くないです） 熱くありません。（い变成く，加くありません） 三声调词，在进行否定变换时，声调要往前移动一位； 其中**“なに”和“ありません”的关系就是简体和敬体的关系；“くなにです**”等同于“くありません”。 特殊：いいです 只要变形，就会在 よい 的的基础上进行变形，其否定形式是 よくありません 或 よくない。 旅行はとても楽しかったです。旅行非常开心。 描述过去体验过的事物的性质时，日语必须使用过去形式； 一类形容词的过去形式：将词尾的 “い” 改为 “かった” 再加です。 过去形式的否定：把词尾的**“い”变成 “く なかったです” 或者在动词的“ありません”后面加上“でした”，最终变为“く ありませんでした**”。 肯定：楽しい 楽しかったです。（い去掉 + かったです） 否定：楽しい 楽しくなかったです。（い去掉 + くなかったです） ​ 楽しくありませんでした。（い去掉，由于ありません是动词，后面需加上でした） 特殊：いいです 的过去形式为 よかったです，过去否定形式时 よくありませんでした 或 よくなかった。 中国は広い国です。中国是辽阔的国家 结构：一类形容词 + 名词 一类形容词可以直接修饰名词。 形容词和名词间不加の，只有名词 + 名词才用の。 このスープはあまり熱くないです。 结构：あまり + 形容词/动词 的否定 “あまり”后接否定形式，表示程度不高。不太 ～ 表示程度的副词。 とても/たいへん 〉 すこし（少し）/ ちょっと 〉 あまり～ません 〉 ぜんぜん～ません （很、非常） （一点儿） （不太） （根本不） 表示数量少的单词 单词 释义 ちょっと 常用于等待 少し 指数量或者程度 多い 与 少ない 多い 与 少ない 不同于其他一类形容词，不能单独修饰名词，如不能说“多い本”，而要说“たくさんの本”。 北京ダックは食べましたか。 用“コーヒーを飲みます”中的“を”前面的名词做话题，或者进行对比时，应该使用助词“は”； 由于这里是对于“ダック”的强调，问题的重点在于有没有吃烤鸭，这是应在“を”前加一个“は”，此时的“を”必须省略而不能变成“をは”的形式。 举例： ​ この本は李さんにもらいました。 正常语序应为： ​ 李さんにこの本をもらいました。 但由于要强调的是“书”，因此我们将“この本”提前，用“は”强调，同时省略“を”。 举例: ​ 私はコーヒーはのみません。 表示温度的词 单词 释义 つめたい(冷たい） 用在物品或者人的态度上，反义词是温かい； さむい(寒い） 指天气，尤指气温； すずしい（涼しい） 指凉快，基本用于风等大自然东西上，气温，反义词是暖かい； あたたかい（暖かい 、温かい） 暖和，温暖，指气温时写作暖かい，指物体温度时写作温かい， 口语时一般读作あったかい； あつい（暑い、熱い） 既可以指天气也可以指温度； 第十課 京都の紅葉は有名です 内容：二类形容词的过去、现在和否定 二类形容词一般为一个或两个汉字或外来语，也被称为形容动词； 有部分词尾为“い”，但并不意味着它就是一类动词，“い”只用于长音等作用。 用法基本等同于名词。 京都の紅葉は有名です。京都的红叶很有名。 二类形容词作谓语： 结构： 名词 + は + 二类形容词 + です（现在） 名词 + は + 二类形容词 + でした（过去） 形容词的疑问词：どう。 この通りはにぎやかではありません。这条街不热闹。 二类形容词的否定形式作谓语： 结构： 名词 + は + 二类形容词 + ではありません（现在） 名词 + は + 二类形容词 + ではありませんでした（过去） 奈良は静かな町です。奈良是安静的城市。 二类形容词可以直接修饰名词，但需要加な。 结构：二类形容词 + な + 名词 奈良は にぎやかな 町 ではあらません。 どんな，连体词 询问人或事物的性质时用どんな+ 名词； 与“その”类似，连体词不能单独使用，必须与体言（名、代、数）一起使用； “どんな”相当于中文的“什么样的”。 横浜はどんな町ですか。 注意： “何の”与“どんな”的区别： “何の”有询问内容和材料两种用法，如： 询问内容： 何の本ですか。 自動車の本です。 询问材料： 何の料理ですか。 魚の料理です。 “どんな”只用于询问性质： どんな本ですか。 面白い本です。 どんな料理ですか。 ちょっと辛い料理です。 どうですか 询问对方对现在或未来的某状态的意见或感想时的表达方式，可直接使用； 询问过去的事情时则用“ どうでしたか”。 有时“どうですか”还用于劝诱对方进行某动作。 ​ お茶、どうですか。 昨日は日曜日でした。昨天是星期日。 名词做谓语的过去式，与二类形容词的变形基本一致： 名词的肯定过去形式：名词 + でした 名词的否定过去形式：名词 + ではありませんでした 连词 “でも”和“そして”。 でも表示转折关系的连词： 私の部屋は狭いです。でも、きれいです。我的房间很小，但是很干净。 そして表示并列关系的连词： 私の部屋は狭いです。そして、汚いです。我的房间很小，而且很脏。 [场所] + 中，表示其场所范围内的全部， 如：世界中（全世界），日本中（全日本），学校中（全校）； [时间/期间] + 中，表示“一～中”，在某个期间一直… 如：一日中（一整天），一晚中（一个晚上） “紅葉”的两种读音 单词 释义 こうよう 表示广义上的能变成红色的树叶 もみじ 多表示枫树的红叶，释义较窄 “季節”的两种读音 单词 释义 きせつ 强调季节，指自然季 シーズン 强调非自然季节，如吃粽子的时节 はる 春 なつ 夏 あき 秋 ふゆ 冬 第十一課 小野さんは歌が好きです 内容：副词が的使用场景 重点：动词分类 按是否能接宾语对动词进行分类： 他动词（及物动词），可以构成主宾结构的动词，有宾语，宾语用を表示。 自动词（不及物动词）不可以构成主宾结构的动词，没有宾语，宾语不用を，一般用が表示。 举例： 主 （宾） 谓 类型 私は ドアを 閉めます 他动词（门被关上） ドアが 閉まります 自动词（门自己关上） 私は 疲れろ 自动词 彼は 死る 自动词 悪い人を 殺す 他动词 按类别： 动词类别 说明 举例 一类动词 末尾不是以る结尾，必然是一类动词，有些长的像二类但其实是一类动词，需要特殊记忆 饮む、游ぶ 二类动词 1. 末尾以る结尾，且る前一假名为い段或え段假名2. 去掉ます后，只剩一个假名 食べる、寝る 三类动词 只有两个 する、くる 形如一类动词的二类动词： 单词 释义 降ります（おります） 下车 借ります（かります） 借 起きます（おきます） 起床 見ます（見ます） 看 小野さんは歌が好きです。小野歌唱得好。 由于后面的“好きです”是一个形容词而不是动词，所以这里不能用“を”而只能用“が”； 大は小が结构：在一个大的概念里描述一个小的概念时使用， 结构：大概念名词 + は + 小概念名词 + が + 形容词です ​ 象 は 鼻 が 長いでず。 ​ 中国 は 人口 が 多いです。 “は”是贯通整个句子的大主语， “が”是小主语，用于表达情感，能力等情感，小主语是大主语的一部分或某一方面； 关于大小主语中，使用“は… が… ”和“の… は… ”所强调内容不同的问题 ​ 森さんは髪 が 少ないです。 正确 ​ 森さんの髪 は 少ないです。 错误 因为头发就是森先生的一部分，这时用“の”就是不对的。 フランスは ワインが 美味しいです。 ≠ フランすの ワインは 美味しいです。 强调法国，法国是酒很好喝的国家。 强调法国的酒，法国的酒很好喝。 ​ 酒不是法国的一部分，只是酒的所属权归法国，因此用“が”或者“の”都可以。 相似的用法有：できる，分かる，由于这两个词是自动词，所以仍然用“が”而不是“を”。 ​ 水泳 が できる。 ​ 日本語 が 分かる。 ロックや音楽などが好きです。 表达列举许多项目中的两个：“～啦，～等” ，不完全列举，后面可加“など”使句子更完整； 注意与“と”区别，“と”用于列举所有的项目，而“や”的列举不一定完全。 ​ 今朝 パンと リンゴと たまご（と）を 食べました。 ​ 今朝 パンや りんごや たまご（など）を たべました。 “と”所列举的最后一项也可以接“と”，而“や”所列举的最后一项只能用“など”，即句尾不能是“や”； 只列举一项时同理，只能用“など”。 结构：名词 + や + 名词（など） 中国 や 韓国 へ 行きます。 吉田先生经常去中国呀韩国等地。 森さんはお酒が好きですから、毎日飲みます。 小森喜欢酒，所以每天都喝。 相当于：森さんはお酒が好きです、だから毎日飲みます。 “～から”放在句子的句尾，表示原因、理由等，可翻译为“因为”。 “だから”是连词，放在句子的居首，可翻译为“所以”。 “ですから”是“だから”的礼貌形式，放在句首句尾均可，是独立的可直接使用，而不用在意前句是否以“です”结尾。 当句子的谓语是一个二类形容词或者名词，这时应该用ですから或者だから。 而当谓语是一个一类形容词时，只能用ですから。 表示喜欢的单词 单词 释义 気に入ります 仅用于第一次见到某事物时的喜欢，其对象用“が”表示 好き 用于持续性的爱好 询问原因用“どうしてですか”; ​ どうしてまた来ますか？ ​ どうした昨日来ませんでしたか？ 表示频率的助词。 いつも &gt; よく &gt; 時々 &gt; たまに &gt; あまり～ません &gt; 全然～ません （经常） （常常） （有时） （偶尔） （不太） （根本不） 使用“が”的场合总结 谓语动词是形容词，此时肯定用不上“を”，用“が”； 谓语是动词，但是是自动词，此时用“が”。 以后还会有更多的使用场景。 表示不擅长的单词 单词 释义 下手 不高明，水平低，物理上的 苦手 不擅长，不善于，心理上的，表示抗拒，但不一定技术上差 第十二課 李さんは森さんより若いです 内容：进行比较 李さんは 森さんより若いです。小李比小森年轻。 结构：名词 + は + 名词 + より + 形容词 可理解为“比…”，表示前者比后者更…，多用于积极的一面，只能用于肯定句； 这里可以理解为用”は“进行强调，强调的内容即是更如何如何的对象。 表达两者差异较大时用副词“ずっと”加以强调，表示“～得多”。 中国 は 日本 より ずっと 広いです。中国比日本辽阔得多。 コーヒーと紅茶とどちらが好きですか。 ーーー紅茶のほうが好きです。 ーーーどちらも好きです。 结构：名词 + より + 名词 + のほう + が + 形容词 可省略重复的第一个名词部分； 两个事物之间进行必较，而且表示后者比前者更…，可理解为“… 更加… ”; 当需要选择一方时，“ のほう”不能省略。 ​ 大阪より東京のほうがにぎやかですか。 无论哪种句式，“より”跟着的都是被比较的对象，用“は”强调的对象都是更如何如何的。 神戸は大阪ほどにぎやかではありません。神户没有大阪那么热闹。 结构： 名词 + は + 名词 + ほど + 形容词否定 + 一类形容词 + ～くないです 名词 + は + 名词 + ほど + 形容词否定 + 二类形容词 + ～ではありません 这里的“ほど”相当于“如”，接在被比较的对象后面，表示…没有…那么…，多用于消极的一面，仅用于否定句； 同样的，这种句式中，整体叙述的是“谁”不怎么怎么，而“は”强调的就是这个不怎么怎么样的对象。 スポーツの中でサッカーがいちばんおもしろいです。体育项目中最有意思的是足球。 结构：名词 + の中で + 名词 + が + いちばん + 形容词 “で”限定了范围，“が”强调了前面的名词； 表示“～之中，XX最～”，表示某个范围内，某一个是最XX。 日本語と英語とどちらが難しいですか。日语和英语哪一个难学？ ーーー日本語のほうが 難しいです。 日语难学。 全部列举的最后一项，仍然可以保留“と”，在二选一的情况下不能省略。 这里的“のほう”实际上是“… より… のほう“的省略形式。 两者选一时使用的疑问词“どちら”，由于疑问词作主语，此时用“が”做助词，强调“が“前面的内容。 この中でどの料理がいちばんおいしいですか。这些菜中哪一个最好吃？ 三者以上中选一时用特殊疑问词:“どれ”、“いつ”、“だれ”、“なに”、“どの+名词”等； 当使用“いちばん”表示最高级时，必须有“で”来对范围进行修饰。 “やっばり”和“やはり”的区别 やっばり 是 やはり 的较随便说法，用于日常谈话，表示“正如自己预测的那样”； 还可以表示“经过一番考虑，最终确定了某种想法”的意思。 关于“人気”的用法 在哪一个范围内受欢迎用“で”； 受到哪些人欢迎用“に”。 ​ この歌は日本で若者に人気があります。 疑问词总结 疑问词 意义 どちら / どっち（口语） 二选一，无论指人还是指物 どれ 多选一，不能指人 何 多选部分，较抽象，不能指人 どの 多选一，后面需要加名词，可指人，如どの人 いつ 询问时间 だれ 询问人 注意： 当被选择的事物已见于上下文或存在于眼前时，使用“どの…か” 或 “どれか”，反之则用“何が”； 即： “どの…か” 或 “どれか”较具体，“何が”较抽象。 第十三課 机の上に本が３冊あります 内容：动词ます形，数量词 ます形，表示一种敬体。 形容词类别 变换方法 举例 一类动词 一类形容词，最后一个假名变为同一行的い段假名，加上ます あう → あいますおくる → おくります 二类动词 去掉る，加上ます みる → みますたべる → たべます 三类动词 特殊，固定不变 する → しますくる → きます 自动词前不能用を，而改用で，可理解为用…干… PS4で遊びます。 机の上に本が３冊あります。桌子上有三本书。 结构：名词 + 数量词 + 动词 （数量词放在动词前） 当列举的物品大于一个时，可视为两个单句相连，省略相同部分即可。 ​ 昨日リンゴお四つ買いました。 ​ 昨日みかんを二つ買いました。 省略相同部分： ​ 昨日 リンゴを 四つと みかんを 二つ 買いました。 再比如： ​ うちに 犬が 2匹と 猫が さん匹 います。 ​ コーヒーを 二杯と けーきを ひとつ ください。 表示时间数量的词语和动词一起使用时，说明动作、状态持续的时间， 这时候表示时间数量的词语后面不能加“に”。 结构：名词[时间] + 动词 ​ 李さんは毎日7時間働きます。 小李每天工作 7 小时。 时间也可以放在名词前面，这里的名词一般为宾语： ​ 毎朝、三十分ジョギングをします。 表示一段时间内进行若干次动作时，即表示频率时用助词“に”。 ​ 李さんは一週間に２回プールへ行きます。 小李每周去游泳池游2次。 ​ 毎日2つリンゴを食べます。 每天吃两个苹果。 结构：名词[时间] + に + 名词[次数] + 动词 当频率的基准时间出现”毎（まい）“时，就不用”に“了，因为“に”的作用就是“每”： ​ 毎週三回一緒に飲みます。 当表示“一周”，“一天”时，常把”一“和”間“省去。 原型 简化 １週間（いっしゅうかん）に 週（しゅう）に １日（にち）に 日（ひ）に １（いっ）**か **月（げつ）に 月（つき）に １年（いちねん）に 年（ねん）に ​ 日に20本ぐらいタバコを吸います。 一天大约吸 20 支烟。 ​ 年に4回ぐらい北京へ行きます。 每年去北京约 4 次。 日语的数次和量词 〜年間 〜年 〜か月 〜个月 1 いちねんかん いっかげつ 2 にねんかん にかげつ 3 さんねんかん さんかげつ 4 よねんかん よんかげつ 5 ごねんかん ごかげつ 6 ろくねんかん ろっかげつ 7 ななねんかん ななかげつ 8 はちねんかん はち/ はっかげつ 9 きゅうねんかん きゅうかげつ 10 じゅうねんかん じゅっかげつ 11 じゅういちねんかん じゅういっかげつ 12 じゅうにねんかん じゅうにかげつ 13 じゆうさんねんかん じゅうさんかげつ 14 じゅうよねんかん じゅうよんかげつ 15 じゅうごねんかん じゅうごかげつ 16 じゅうろくねんかん じゅうろっかげつ 17 じゅうしち / ななねんかん じゅうななかげつ 18 じゅうはちねんかん じゅうはち / はっかげつ 19 じゅうきゅうねんかん じゅうきゅうかげつ 20 にじゅうねんかん にじゅっかげつ 何 なんねんかん なんかげつ 〜週間 〜个星期 〜時間 〜个小时 1 いっしゅうかん いちじかん 2 にしゅうかん にじかん 3 さんしゅうかん さんじかん 4 よんしゅうかん よじかん 5 ごしゅうかん ごじかん 6 ろくしゅうかん ろくじかん 7 ななしゅうかん しち / ななじかん 8 はっしゅうかん はちじかん 9 きゅうしゅうかん くじかん 10 じゅっしゅうかん じゅうじかん 11 じゆういっしゅうかん じゅういちじかん 12 じゅうにしゅうかん じゅうにじかん 13 じゅうさんしゅうかん じゅうさんじかん 14 じゅうよんしゅうかん じゅうよじかん 15 じゅうごしゅうかん じゅうごじかん 16 じゅうろくしゅうかん じゅうろくじかん 17 じゅうななしゅうかん じゅうしち / ななじかん 18 じゅうはっしゅうかん じゅうはちじかん 19 じゅうきゅうしゅうかん じゅうくじかん 20 にじゅっしゅうかん にじゅうじかん 何 なんしゅうかん なんじかん 〜日 〜天 1 ついたち 2 ふつか 3 みっか 4 よっか 5 いつか 6 むいか 7 なのか 8 ようか 9 ここのか 10 とおか 11 じゅういちにち 12 じゅうににち 13 じゅうさんにち 14 じゅうよっか 15 じゅうごにち 16 じゅうろくにち 17 じゅうしちにち 18 じゅうはちにち 19 じゅうくにち 20 はつか 何 なんにち 午後郵便局へ荷物を出しに行きます。 去邮局寄包裹。 “へ”表示方向，动词去掉ます加“に”表示目的。 结构：名词（场所） + へ + 动词去掉ます + に + 行きます/来ます 名词（场所） + へ：表示目的地 动词去掉ます + に：表示移动行为的目的 ​ 李さんは 食堂へ 昼ご飯を 食べに 来ました。 このけーきは３個で500円です。 用于不称重量而以数个的方式售物。 结构：名词[数量] + で + 价格 “で”表示限定范围， 数量为1时不加“で”。 どのぐらい 和 どれぐらい “どのぐらい（どれぐらい）” 是由 “どの（どれ）” 和 “ぐらい” 合成的疑问句， “くらい / ぐらい”接在数量后面，表示大概的量，一般用于无法确定具体单位的情况， 有时还与“だいたい”同时使用： ​ このパソコンはいくらでしたか。 ​ ーーーだいたい 20万円ぐらいです。 かかります用于时间或金钱，相当于汉语的“需要、花费”： ​ 家から会社までどのぐらいかかりますか。 ​ ーーー電車で一時間ぐらいかかります。 近义词“ごろ”接在时间后面，表示时间点的左右。 同时应注意，在描述花费的量时，要紧挨动词放置而不需要“を、が”等助词，因为这里花费的不是“量”，而是时间或钱。 ​ 3000円かかります。 ​ お金をかかります。 再比如： ​ 3 人（にん）います。 ​ 人（ひと）がいます。 ​ 人（ひと）が3 人（にん）います。 ​ 20分かかります。 ​ 時間がかかります。 ​ 時間が20分かかります。 ​ お風呂は一時間かかりました。 日本独特的数法 数字 ～つ ～人 〜台 〜個 〜本 〜杯 1 ひとつ ひとり いちだい いっこ いっぽん いっぱい 2 ふたつ ふたり にだい にこ にほん にはい 3 みっつ さんにん さんだい さんこ さんぼん さんばい 4 よっつ よにん よんだい よんき よんほん よんはい 5 いつつ ごにん ごだい ごこ ごほん ごはい 6 むっつ ろくにん ろくだい ろっこ ろっぼん ろっぱい 7 ななつ ななにん ななだい ななこ ななほん ななはい 8 やっつ はちにん はちだい はっこ はっぽん はっぱい 9 ここのつ きゅうにん きゅうだい きゅうこ きゅうほん きゅうはい 10 とお じゅうにん じゅうだい じゅっこ じゅうぽん じゅうぱい 何 いくつ なんにん なんだい なんこ なんぼん なんぱい 量词 量词 适用对象 量词 使用对象 ～人（にん） 人 ～本（ほん） 细长物品：瓶、铅笔、伞、香蕉等 ～台（がい） 机械或车辆：车、电脑等 ～杯（はい） 容器内的饮料：茶、咖啡、啤酒等 ～枚（まい） 薄平物品：盘子、邮票、衬衫等 ～匹（ひき） 小动物：猫、狗、昆虫、鱼等 ～歳（さい） 年龄 ～頭（とう） 大动物：牛、马、象等 ～回（かい） 次数 ～羽（わ） 鸟、兔 ～着（ちゃく） 衣服等 ～番（ばん） 顺序 ～冊（さつ） 书，笔记本等 ～足（そく） 成对物品：鞋、袜子等 〜個（こ） 立体的物品：鸡蛋、饭团子；空容器或器皿：箱子、盒子；概念性的、抽象的事物：密码等； ～つ 1 ～ 9 岁的年龄；立体的物品：橘子、帽子等；抽象的事物：谜、选项等；不用于 10 以上的数字； 第十四課 昨日デパートへ行って、買い物しました 内容：动词て形变换，动词分类，移动性动词を 以ます形为基础的动词分类： 类别 特征 一类动词 “ます”形去掉“ます后的最后一个音位于”い段”的绝大部分动词 二类动词 “ます”形去掉“ます“后的最后一个音（韵母）位于”え段“的动词去掉“ます”只剩下一个假名的动词 三类动词 只有**”来（き）ます”和“します”** “します”前接汉字词或外来词可以构成新的三类动词， 且以这种形式构成的三类动词等同于下列结构： ​ 名词 + を + します。 如：勉強します ＝ 勉強をします。 动词的て变形 三类动词：只有两个，くる变为来て，する变为して。 二类动词：去掉る，加て。 一类动词如下： 从原形变换： 词尾 变形为 举例 く いて 書く → 書いて 聞く → 聞いて ぐ いで 泳ぐ → 泳いで 急ぐ → 急いで す して 話す → 話して む、ぶ、ぬ んで 読む → 読んで 遊ぶ → 遊んで 死ぬ → 死んで う、る、つ って 買う → 買って 送る → 送って 待つ → 待って 从“ます”形变换： 词尾 变形 き、ぎ い + て（で） い、ち、り っ に、み、び ん + で し 不变 特殊：行く，变形为行って。 声调问题：当一个词由三个假名组成，中间假名为②调时，变换为て形时应将第一个假名变为②调。 实例如下表： 动词类别 ます 假名化 去掉ます て形 一类动词 書きます急ぎます行きます死にます読みます飛びます買います待ちます売ります話します かきますいそぎますいきますしにますよみますとびますかいますまちますうりますはなします かきいそぎいきしによみとびかいまちうりはなし かいていそいでいってしんでよんでとんでかってまってうってはなして 二类动词 食べます見ます たべあすみます たべみ たべてみて 三类动词 来（き)ますします きますします きし きてして 名词的动词化：加する 如：勉強（名词） → 勉強する（动词） ​ メモ（外来词） → メモする（动词） ​ 日本語 を 勉強する。 昨日デパートへ行って、買い物しました。昨天去商场买东西了。 表达两个动作相继发生时，两个动作用て连接。 结构： 动词 + て + 动词 ​ いえへかえって、しゅくだいをします。 一般只连接两到三项，需要连接更多动作时，使用”これから“： ​ 図書館へ行って、勉強をします。それから家へ帰って、手紙を書きます。 李さんは毎晩ラジオを聞いてから、寝ます。小李每天晚上听了收音机后睡觉。 “てから”表达相继发生的两个动作,比起普通的”て形”更加强调事情的先后，有更多的言外之意。 用于以下几种情况： 前项必须：先…再… 后项迅速：做了…就… 表示”自从…“ 结构：动词“ます形”去掉“ます” + てから + 动词 注意：“てから”在一个句子中不能反复使用。 ここに住所と名前を書いてください。请在这里写名字和住址。 结构：动词”て“形 + ください，表示要求某人做某事，不需要对方的回答。“请～”。 ​ この荷物を 航空便で おくって ください。 口语中为：～ + て↗ 在后面加**“ませんか”**是更有礼貌的形式，对方可以拒绝： ​ 後で 写真も見て くださいませんか。 ​ スケジュール表を ファックスで 送って くださいませんか。 このパスは駅前を通りますか。 を表移动性动词，表示经过/离开的场所，离开某个范围。 结构：名词（场所） + を + 动词（离开、经过等动词） ​ 公園 を 散歩する。 离开、经过等动词如：通ります、渡ります、過ぎます、卒業します、出ます。 在这个范围内，进入范围前在移动，在范围内时在移动，离开范围后也在移动。 “を”与“で”的区别： “を”表移动的范围，就在这个范围内，动作需要移动，表示动作移动的范围； “で”表示发生的动作，这里的动作不需要移动，表示动作发生的场所。 ​ 廊下 を 走ります。 ​ プーロ を 泳ぎます。 体育运动所进行的场所要用“で”。 ​ 公園で野球をします。 角的两种读音 单词 释义 かど 指外角 コーナー 指内角 左右 单词 释义 左 ひだり 右 みぎ 表示黑的单词 单词 释义 くろい 颜色黑 くらい 昏暗，性格阴暗 なかなか 表示从个人的判断标准判断，含有评价他人的含义，因此不能用于谈及上司或长辈， 含有实际情况比自己预想的程度要高的含义，一般用于说话人预想的程度较低时。 打开和关闭的单词 单词 含义 けします ≈ turn off，关掉开关等 つけます ≈ turn on，打开开关等 あけます ≈ open，开启门、抽屉等 第十五課 小野さんは今新聞を読んでいます 内容：现在进行时 小野さんは今新聞を読んでいます。小野正在读报纸。 结构：动词て形 + います 表示动作正在进行，“正在〜”； 也可以使用“〜ていました”表示过去进行时，使用“〜ていません”表示进行时的否定。 ここに写真をとってもいいですか。这里可以拍照吗？ 结构：动词て形 + もいいですか 表示许可，“（我）可以… 吗？”； 用于疑问句“〜ては いけませんか”的时候，表示请求对方许可，比“〜てもいいです”稍显委婉。 当进行回答的时候，有下列两种情况： 根据自己的心情回答： 肯定：“どうぞ”、“かまいません”等； 否定：“いえ、ちょっと… ”、“すみません、〜から”等。 基于社会惯例或公共准则进行回答时： 肯定：“いいです”、“大丈夫です”等； 否定：“いけません”、“だめです”等。 飛行機の中でタバコをすってはいけません。在飞机里不可以吸烟。 结构：动词て形 + はいけません 表示禁止，“不可以～”。 口语还可以用：动词て形 + は + だめです。 ​ 飛行機の中でタバコを吸いってわいけません。 日曜日、小野さんは公園でボートに乗りました。星期日，小野在公园划了船。 结构：名词 + に + 动词 表示人或物体的附着点，或人或物体停留在交通工具或椅子上等时，用助词“に”； ​ 小野さんは公園でボートに乗りました。 ​ 李さんは電車にのりました。 注意：此处绝对不能用“を”助词。如果想描述的动作没有归着点性，则可以用表示动作发生场所的“で”： ​ あそこ で / に 車止めてください。 如果用“で”，则表示强调“停下”这个动作发生的场所（随后车可以继续走）； 如果用“に”，则表示强调“车”停下的位置，不再移动。 对于自动词与他动词，助词“に”表示的动作的归着点的含义是不同的： 他动词：动作内容最后的落点； 財布を電車に忘れました。（钱包是忘了的对象，电车是钱包忘了的地点） 庭に犬の家を作ります。（最终狗窝放到了院子里） 庭で犬の家を作ります。（在院子里做了狗窝，放到哪了未知） 自动词：动作主体穿越几个空间后的落点。 部屋に入ります。 而“を”助词表示动作的起点，可以说是“に”的相反词。 ​ 部屋に入ります。 部屋を出ます。 ​ バスに乗ります。 バスを降ります。 ​ 椅子に立ちましょう。 站在椅子上。 ​ 椅子を立ちましょう。 从椅子上站起来。 助词“を”用法总结 用法 例句 动作的起点 大学を卒業します 动作移动的范围 公園を散歩します。 穿过、经过的场所 曲がります。 表示移动行为的目的地的助词不光可以用“へ”，还可以用“に”来表示。 ​ 李さんは病院に行けます。 “へ”较强调方向，“に”较强调细节。 “に”的用法总结 用法 例句 表示存在的场所 公園にベンチがあります。 表示时间 五時に帰ります。 表示动作的对象 友達に会います。 表示移动的目的 本を買いに行きます。 | 表示附着点 | 車に乗ります。 | 注意：这些用法均不能用“へ”来替换，只有表示典形的移动动词的目的地时两个助词才可以通用。 第十六課 ホテルの部屋は広くて明るいです 内容：两个形容词在一个句子里时，用て连接 变形方法： 一类形容词：将词尾的**“い”变为“くて”**； 二类形容词：直接加**“で”**。 原形 て形 一类形容词 明るい 新しい 明るくて 新しくて 二类形容词 簡単 親切 簡単で 親切で ホテルの部屋は広くて明るいです。宾馆的房间既宽敞又明亮。 结构：一类形容词 + て + 一类形容词 表示一个主语有两个特性：“既～又～” ​ ホテルの部屋は広くて明るいです。 宾馆的房间又宽敞又明亮。 このコンピュータの操作は簡単で便利です。这个电脑的操作既简单又方便。 结构：二类形容词 + で + 二类形容词 表示一个主语有两个特性：“既～又～” 二类形容词用“で”连接。 类似的，两个以上的名词并列使用时，也可以用同样的结构： 结构：名词 + で + 名词 ​ スミスさんは 旅行会社の社員で、営業部の部長です。 長島さんは渋谷に住んでいます。长岛住在涩谷。 结构：动词 + ています 表示动作结束后留下的状态：动作虽然在瞬间结束了，但留下的结果仍在继续。 ​ 森さんは車を持っています。 森先生有辆车。 ​ 田中さんを知っていますか。 认识田中先生吗？ 注意：一般的对『〜ています』提问的句子做否定回答时， 使用『〜ていません』； ​ 但『知っていますか』的否定是『知りません』。 表示费用的词 平假名 举例 〜費（ひ） 会費 光熱費 交通費 食費 〜料（りょう） 入場料 使用料 送料 手数料（手续费） 〜代 電気代 水道代 タクシー代 食事代 对人的相貌的描述 ​ 背が 高くて 脚が長くて… 身体部位 正面形容 负面形容 脚（あし）／指（ゆび） 長い（ながい）／太い（ふとい） 短い（みじかい）／細い（ほそい） 足（あし） 大きい（おおきい） 小さい（ちいさい） 目（め） 大きい（おおきい） 小さい（ちいさい）／細い（ほそい） 鼻（はな） 高い（たかい） 低い（ひくい） 顔（かお） 大きい（おおきい） 小さい（ちいさい） 背（せ） 高い（たかい） 低い（ひくい） 表示转折的助词“が” 结构：小句 + が + 小句 相当于汉语的**“但是”**； ​ 三が月 パソコンを勉強しましが、まだ あまり できません。 已经学了三个月电脑了，但还不太会用。 表示否定 结构：まだ + 动词否定 表示还没达到所询问的内容的程度，相当于汉语的“还没有”： ​ 何年ぐらい日本語を勉強しました。 ​ ーーーにねんべんきょうしました。でも、まだあまりできません。 对“もう”提问的句子进行回答时，使用“まだ…ていません”的形式，表示“现在没有正在…”： ​ 小野さんはもう結婚してますか。 ​ ーーーいいえ、まだ結婚していません。 如果不使用“〜ていません”的形式而是一般的“しません”形式的话，有一种“意志感”； ​ まだ結婚していません。 我还没结婚。 ​ まだ結婚しません。 我还不结婚。 表示指头的单词 指头 平假名 拇指 おやゆび（親指） 食指 ひとさしゆび（人差し指） 中指 なかゆび（中指） 无名指 くすりゆび（薬指） 小指 こゆび（小指） “脚”和“足” 平假名 释义 足（あし） 脚 脚（あし） 腿 用形容词て形描述人的状态 平假名 释义 太ります 变胖，过程 太（ふと）っています 描述很胖，状态 痩（や）せます 变瘦，过程 痩せています 描述很瘦，状态 “ちゃんと”和“ゆっくり”的区别 “ちゃんと”表示“没错”，“处于正常状态”等意义，只用于口语，表示不怎么怎么样是不对的： ​ 皆さん、机の上をちゃんと片づけてくださいね。 “ゆっくり”表示精神上的放松，“充分充足”等意。 关于“ずいぶん” “ずいぶん”表示程度高，内容上无论好坏，表示事态的程度大幅度超过了说话人自身或一般性的评判标准。 ​ そのカバン、ずいぶん大きですね。 第十七課 私は新しい洋服がほしいです 内容：表达愿望、想法 动词的たい形 动词 ます形 たい形 一类动词 書きます急ぎます飛びます読みます死にます待ちます売ります買います行きます話します 書きたい急ぎたい飛びたい読みたい死にたい待ちたい売りたい買いたい 行きたい話したい 二类动词 食べます見ます 食べたい見たい 三类动词 来ますします 来たいしたい 动词的ます形=动词的たい形。 私は新しい洋服がほしいです。我想有套新西服。 结构：名词 + が + ほしいです，表达愿望，“想要～”，主要接在名词后。 ほしい是一个形容词，所以这里只能用 “が”，而不能用 “を”。 注意：只能用于第一、第二人称，不能用于第三人称。 ​ 新しいパソコンが欲しいです。 わたしは映画を見たいです。我想看电影。 结构：名词1 + は + 名词2 + を + 动词たいです，表达想做某事，“想做～”。 ​ 名词1 是愿望的主体，名词2 表示希望进行动作的对象，“たい” 前有 “ます时要去掉“ます”。 否定：たくない、たくありません 过去：たかった ​ 今日はお酒を飲みたくないです。 “たい” 的对象有时不用 “が，を” 而用 “を”（如碰到他动词的时候），但 “ほしい” 的对象则只能用 “が” 来表示。 いっしょにお茶を飲みませんか。一起喝茶怎么样？ 结构：动词 + ませんか，表示提议做某事， “（动作）…怎么样”？ 语气比上面两者更缓和。 ちょっと休みましょうか。休息一下吧。 结构：动词 + ましょうか，表示提议做某事，礼貌程度没有“ませんか”高，更随意。 询问与回答 态度 はい（いい） いいえ 回答 お願いしますいただきますありがとうございます 結構ですいいですちょっと……から… 何でもいいです。什么都可以。 结构：疑问词（何、いつ、だれ等）＋でも，“疑问词 + 都（什么都）”，表示完全肯定。 注意：疑问词 + でも + 只能接肯定句。例：だれでも分かります。（谁都明白） ​ 疑问词 + も + 接否定句。例：だれも分かりません。（谁都不明白） “でも” 和 “も” 不能换用。 いつでも：随时去，有必要就去 いつも：经常去 ​ いつでもてんわをしてください。 注意：后者的完全否定形式，“も” 前面是可以存在助词的。 ​ 誰に会いたいですか。 ​ ーーー誰にも会いたくないです。 いいですね。太好了啊。 句子 + ね:缓和语气。 ぜひ 表示“一定”，“必定” 的意思，后接『〜たい』、『〜てください』、『〜ましょう』等， 是表达强烈愿望、意志、提议的形式，不能表示推测。 ​ お汁粉？是非食べたいです。 表示整个范围的场所、时间的『〜中』 『〜中に』表示该期间结束之前的意思，一般接在表示未来某一特定时间后。 读音 用处 じゅうに 今日、明日、今週、来週、今年 ちゅうに 〜週、〜月 第十八課 携帯電話はとても小さくなりました 内容：表达变化 単語 变形 + なります + します 一类形容词 暖かい小さい 暖かく小さく 暖かくなります小さくなります 暖かくします小さくします 二类形容词 元気きれい 元気にきれいに 元気になりますきれいになります 元気にしますきれいにします 名词 医者 医者に 医者になります 医者にします 携帯電話はとても小さくなりました。手机变小了。 结构：一类形容词 + い变为く + なります，表示事物的性质或状态发生变化：“变得～”。 一类形容词加动词总是要变为く形。 もう元気になりました。已经恢复健康了。 结构：二类形容词 / 名词 + に + なります，表示事物的性质或状态发生变化：“变成～”。 ​ もう 元気 に なりました。已经恢复健康了。 息子は医者になりました。儿子当医生了。 结构：名词 + に + なります，表示事物的性质或状态发生变化：“变成～”。 テレビの音を大きくします。把电视机的声音开大一点儿。 结构：一类形容词 + い变为く + します，表达主语的意志性动作，使事物发生变化：“把～变得～”。 注意：“～なります”是自动词，“～します”是他动词。 部屋をきれいにします。使房间干净。 结构：二类形容词 + に + します，表达主语的意志性动作，使事物发生变化：“把～变得～”。 会議室を禁煙にします。会议室里禁烟。 结构：名词 + にします，同样是因主语的意志性动作，使事物发生变化； 此结构主要用于回答服务员的点餐，把自己的决定告知对方。 ​ コーヒーにします。 似合います 自动词，相当于汉语的“相称” “适合”等意思。 结构： [人]は [物] が 似合います [物]は [人] に 似合います 例如： ​ 赤いほうがいいですね，よく似合いますよ。 意为：李さんは赤いのがよく似合います。 ​ 小野さんは浴衣が似合います。 ​ このシャツは父に似合いません。 ​ まとめて 表示把若干个汇总在一起。 ​ お正月は洋服が安いなりますから、まとめて買います。 旅行の荷物は軽いほうがいいです。 结构：一类词/二类词 + ほうが いいです 比较两个以上事物的性质，认为其中一个比较好时，表示自己的选择或向别人建议。 其中： 一类词 + ほうが いいです 二类词 + な + ほうが いいです ​ 子供は元気なほうがいいです。 因为ほうが是个名词。 “音”和“声” 平假名 释义 音（おと） 物体发出的声音（非发声器官） 声（こえ） 人或动物发出的声音（发声器官） “まもなく”和“もうすぐ” 都表示“不久、一会儿”，但“間もなく”主要用于正式场合，而“もうすぐ”主要用于日常会话。 “さらに”和“もっと” 两者都是“更加”的意思，但“さらに”较郑重，“もっと”则是较随意的说法。 第十九課 部屋のかぎを忘れないでください 内容：动词的ない形 变化规律： 一类动词： 去掉ます形，把最后一个音变为“あ段”，加“ない”； 如果最后一个音是“い”，把**“い”** 变为**“わ”**后加 “ない”。 二类动词：去掉ます形，直接加“ない”。 三类动词：把“ます”变成“ない”，把“します”变成“しない”。 区别一类动词的“し”和三类动词的“し”： “し”前还有假名的是一类 “し”前只有汉字的是三类 一般都对，但也有特例需特别记忆，如“返します”。 动词 ます形 去掉ます ない形 一类动词 書きます急ぎます飛びます 読みます死にます 待ちます 売ります買います行きます話します 書き急ぎ飛び 読み死に待ち売り買い行き話し 書かない急がない 飛ばない読まない死なない待たない売らない買わない行かない話さない 二类动词 食べます見ます 食べ見 食べない見ない 三类动词 来ますします きし こないしない 部屋のかぎを忘れないでください。请不要忘了房间钥匙。 结构：动词 + ないで + ください，表示否定的命令，“请不要～”。 注意：这里固定为**“で”**，没有其他变化。 ​ 無理をしないでください。 李さんは今日早く帰らなければなりません。小李今天必须早点回家。 结构：动词 + なければなりません，表示必须做某事，“必须～”。 “ば”形表示一种假设，“假如…”，结构为“一类形容词 + い变为けれ + ば”，同时“なりません”表示否定， 所以上面的结构可等价于**“如果不…的话就不行”**。 可以用**“ないといけません”なければなりません的形式代替“なければなりません”**，后者多用于书面语； 同时前者的省略形式“ないと”在口语中也用的很多，后者也有省略形式“なきゃ”。 ​ あっ、八時ですね、もう駅へ行かないと。 明日は残業しなくてもいいです。明天可以不加班。 结构：动词ない形去掉ない + なくてもいいです，表示不做某事也可以 ， “不～也可以”，是上一结构的否定； 由结构“てもいいです，可以…”加上“なく”表示否定得来； ​ 明日は残業しなくでもいいです。 注意区别： 这里的否定加在“ても”上，表示对动词的否定，而不是对“いいです”，即“可以”的否定， 表达“…是可以的”，“可以”的内容是“不做…”。 〜なくてもいいです， 可以不… 〜てはいけません， 不可以… 与“なければなりません”可互为否定问答。 A：吉田課長はどの人ですか。吉田课长是哪个人。 B：あの人が吉田課長です。那个人是吉田课长。 结构：名词 + が + 名词，新信息作主语时，助词用“が”。 类比于英语的 a 和 the： ​ あそこに鳥がいませ。 There is a bird. ​ あの鳥は綺麗です。 The bird is beautiful. 再比如： ​ 山田先生はどのかたですか。 ​ ーーー山田先生 は あの方です。 ​ ーーーあの方 が 山田先生です。 叙述直接观察到的事物，而不是作为话题在讨论这个事物时，使用“[名词] が [动词]”的形式， 因为这里也同样是新信息在做主语。 ​ 子供が公園で遊んでいませ。 “何、だれ、どこ、いつ”等表示疑问的词做主语是不能用“は”，只能用“が”，因为这些词不能表示旧信息。 ​ だれがいませか。 ​ 何が好きですか。 “初心者” 与 “上級者” 日语中不用 “高級”，而是 “上級”表示技能的等级； 日语中的“高級（こうれべる）”不用于描述人的技能、技术等，只限于表示高质量的物品。 “だいぶ” 表示程度的副词 表示程度相当高，用于 “〜なりました” 等表示变化的句形中，突出强调变化的程度。 ​ 昨日だいぶお酒を飲みました。 第二十課 スミスさんはピアノを弾くことができます 内容：动词的基本形（动词原形） 一类动词：去掉“ます”，把最后一个音变为“う段”； 二类动词：去掉“ます”，加“る”； 三类动词：“します”变为“する”，“きます”变为“くる”。 动词 ます形 去掉ます 基本形 一类动词 書きます急ぎます死にます読みます飛びます買います待ちます売ります行きます話します 書き急ぎ死に 読み 飛び買い待ち売り行き話し 書く 急ぐ死ぬ読む飛ぶ 買う待つ売る行く話する 二类动词 食べます見ます 食べ見 食べる見る 三类动词 来ますします きし くるする スミスさんはピアノを弾くことができます。史密斯先生能弹钢琴。 动词名词化：v. + こと = n. 类比于名词动词化： n. + する = v. 勉強 + する = 勉強する 结构： 动词（基本形） + こと + ができます（肯定），表示可能，“能～”； 动词（基本形） + こと + ができません（否定），表示不可能，“不能～”。 できます不仅能表达“能，有能力”，根据上下文也可以表达“允许，遵守某种规章制度”。 ​ スミスさんは ピアノを 弾くこと ができます。 ​ 森さんは中華料理を作ることができます。 ​ ーーーはい、できます。 ​ 日本では何歳から 結婚すること ができますか。 ​ ーーー女の人は１６歳から、男の人は18歳からできます。 私の趣味は音楽を聞くことです。我的兴趣是收集邮票。 结构：名词 + は + 动词（基本形）ことです，“～是～”， 谓语部分的内容是一种动作、行为时，动词后接“ことです” 之后，整个句子名词化。 ​ 私の趣味は 切手を集める ことです。 我的兴趣是收集邮票。 ​ 中田さんの趣味は山に登ります。 中田さんの趣味は山に登ることです。 为什么一定要用这种结构？ 上句中，如果把“ことです”去掉，则原句变为ます形： ​ 私の趣味は 切手を 集めるます。 我的兴趣在收集邮票。 这里的“ことです”充当了汉语中的**“是”**的角色。 由于动词基本形 + こと可以起到和名词同样的作用，因此，也可以用名词或名词短语(如“車の運転”来替代)。 ​ 小野さんは 車 を 運転すること ができません。 这里用了“を”，所以后面一定要接动词，所以只能用“すること”的形式； ​ 小野さんは 車 の 運転 ができません。 这里“車の運転”整体是一个名词，因此可以直接使用。 こちらへくる前に、電話をかけてください。来之前请打个电话。 结构：动词（基本形） + 前に，表示一个动作在另一个动作前发生，“在～之前”。 ​ 毎日寝る前にシャワーを浴びます。 这个句形也可以用“名词 + の + 前に”形式使用。 ​ 会議の前に、資料をコピーします。 ごちそうします “ごちそう”这个词的本义是“奢华且高级的菜肴”， 加“します”变成“ごちそうします”则为请别人吃饭的意思。 “ごちそうしてください”意为：“希望你让我们品尝一下你做的饭菜”，即“我让你请我们吃饭”。 ​ わたしは時々家で李さんに日本料をごちそうします。我时不时在家请小李吃日本料理。 ​ あの先生は授業が終わってから、よく学生にごちそうします。那个老师上完课后常常请学生吃饭。 疑问词的名词化 疑问词“いつ、だれ、どこ”等词后面加“か”，表示“某时、某人、某地”的意思。 ​ 部屋に誰か今ますか。 “いつか、だれか、どこか，何か”本身并不表示疑问的意思，所以可以用于陈述句； 可理解为“sometime, someone, someplace”或者“anytime, anyone, anyplace”。 ​ 冬休み、どこかへ行きたいです。 I wanna go somewhere. ​ おなかが空きましたね、何かたべましょう。 Let’s eat something. 注意区分以下的区别： ​ 部屋に だれか いますか。 房间里有人吗？ 这里是一般疑问句，目标并没有确定。Is there anyone in the room? ​ 部屋に だれが いますか。 房间里有谁？ 这里的だれが可理解为特殊疑问词，目标已确定。Who is in the room? 再比如： ​ 何か（を）買いましたか。 你买东西了吗？ Did you bought anything? ​ 何を買いましたか。 你买了什么？ What did you bought? 再比如： ​ 冬休みどこかへ行きたいです。 ​ 注意这里“へ”，接在“どこか”后面，清晰地体现出了“どこか”的“名词性”。 再举一个比较特殊的例子： ​ 何か趣味がありませか。 ​ ええ。音楽を聞くことです。 ​ 第一句中，先用“趣味がありませか”确定兴趣存在，即“有没有”，再用“何か”询问“是什么”。 “皮”和“革”的区别 平假名 释义 皮（かわ） 还长在动物身上时 革（かわ） 不在动物身上 肌（はだ） 人的皮肤 “鳥肌”，日语中表示恐怖、恶心、感动等。 “趣味(しゅみ）”和“興味（きょうみ）” “趣味”表示“爱好，喜好”； “興味”表示“兴趣”。 关于“授業” 老师去授课：授業をする； 学生去上课：授業を受けます（うけます）。 第二十一課 私はすき焼きを食べたことがあります 内容：た形变换，过去的经历 动词的“た形”变换，与“て形”完全一致，把“て”换成“た”（“で”换成“だ”）即可。 动词类别 ます 去掉ます て形 た形 一类动词 書きます急ぎます死にます読みます飛びます買います待ちます売ります話します行きます 書き急ぎ死に読み飛び買い待ち売り話し行き 書いて急いで死んで読んで飛んで買って待って売って話して行って 書いた急いだ死んだ読んだ飛んだ買った待った売った話した行った 二类动词 食べます見ます 食べ見 食べて見て 食べた見た 三类动词 来まします 来し 来てして 来たした 私はすき焼きを食べたことがあります。我吃过日式牛肉火锅。 结构： 肯定：动词（た形） + ことがあります，表示过去的经历，“曾经～过”； 否定：动词（た形） + ことがありません，“曾经没有～”； 疑问：动词（た形） + ことがありますか,“曾经～吗？”。 回答：“はい、あります”或“いいえ、ありあません”。 ​ 北京へ行ったことがありますか。 ​ ーーーいいえ、一度も行ったことがありません。 ​ ーーーいいえ、ありません。 此处不能用“行きました”或“行きます”等结构来回答，为什么？ 因为此处的“行った”已经被“こと”给名词化了，此时问句是对于名词的提问，应用“あります”来回答“有还是没有”。 注意： 至少用于描述半年以前发生的事情，而在描述“昨天”等离现在很近的以前的经历时，不能使用本句形。 在过去某个时间点，如“3年前，1998年”等具体时间点一般也不用这个结构，直接用“ました”结构即可。 李さんは会社が終わった後で、飲みに行きます。小李下班后去喝酒。 结构：动词（た形） + 後で，～，表示一个动作在另一个动作之后发生，“在～之后”； 这个句形也可以用名词 + の + 後で的形式使用。 为什么？因为“後”是个名词，名词与名词的接续用“の”。 ​ 会社が終わった後で、飲みに行きます ​ 仕事の後で、食事をする。 “～前”的后面必须是“に”，而“～後”的后面必须是“で”。 もっと野菜を食べたほうがいいですよ。还是多吃点蔬菜好啊。 结构：动词（た形） + ほうがいいです，表示两种事物中进行选择，“还是～好啊”，“It would be better…”； 否定为：动词（ない形） + ほうがいいです。 当建议对方做某事时，句尾多加“よ”。这个句形只表示建议，比“〜ください”等句形更委婉，没有命令的意味。 ​ もっと野菜を食べたほうがいいですよ。 ​ もうあの人に会わないほうがいいですよ。 由于“ほう”是个名词，因此也可以用于其他的接续形式： 结构：これ／ろれ／あれ + の + ほうがいいです 或この／その／あの + ほうがいいです。 ​ 速いですから飛行機のほんがいいです。 ​ ビールのグラスは、これとあれとどちらがいいですか。 ​ ーーーこれのほうが いいです。 ​ デザインは、この車とあの車とどちらがいいですか。 ​ ーーーあのほうがいいです。 另外，口语中谈到对方的事情是，可用“その”，即用“そのほうがいいです”表示接受对方的建议。 ​ ホテルを予約したほうがいいですか。 ​ ーーーそうですね。連休ですから、そのほうがいいですね。 ​ すぐに吉田さんに連絡したほうがいいですか。 ​ ーーーええ、そのほうがいいですね。すがに電話してください。 窓を閉めましょうか。关上窗子好吗？ 结构：动词 + ましょうか，“～好吗”。 有以下三种含义： 提议对方和自己做同样的事情； 提议为对方做某事； 向对方确认自己的提议是否可行，“为了咱俩，我来…”。 学过的“～ませんか、ましょう”只表示提议对方和自己一起做某事，而“ましょうか”则另外还有向对方确认自己的提议是否可行的意思； 回答时，按以下情况分别回答： 问句为提议为对方做某事：“お願いします”或“結構です”； 提议双方一起做某事： 肯定：“はい、そうしましょう”或“いいですね”； 否定：“～ないでください”或“いいえ，ちょっと…”。 例如： ​ 荷物をもちましょう。 ​ ーーーはい、お願いします。 ​ まどをしめましょうか。 ​ ーーーいいえ、閉めないでください。 過ぎ（すぎ） “～すぎ”用在表示时间或年龄的词语后面表示超过了该时间或年龄。 用在表示时间的词语后面时，用数词 + 時/分 + 過ぎ的形式； 用在表示年龄的词语后面时，用数词 + 過ぎ的形式。 ​ 昨夜で 十時過ぎに 地震がありました。 表示“特别”的单词 平假名 释义 とくに（特に） 尤其 とくべつ（特別） 特别 第二十二課 森さんは毎晩テレビを見る 内容：简体形变换，形容词简体形 敬体形：对于长辈或关系不太密切的人之间使用的形式； 如：“〜ます”“〜ません”“〜ました”“〜ませんでした”。 简体形：同辈或关系密切的人之间使用的形式，有关法律的文章、报纸、商业文件等也都用简体。 如：“基本形”“ない形”“〜た形”。 注意：一类形容词、二类形容词和名词本身并没有“简体形”和“敬体形”之分，只有在做谓语时，其谓语形式才具有“敬体形”和“简体形”。 森さんは毎晩テレビを見る。森先生每天晚上看电视。 动词的简体形： 动词 肯定/否定 敬体形 简体形 现在、将来形式 肯定 買います（ます） 買う（基本型） 否定 買いません 買わない（ない型） 过去形式 肯定 買いました 買った（た型） 否定 買いませんでした 買わなかった（なかった型） 特殊例子： ​ あります → ある ​ ありません → ない ​ ありました → あった ​ ありませんでした → なかった 例如： ​ この街はにぎやかになりましたね。 ​ この街はにぎやかになったね。 不要用中文的思维，在较为明显的动词上进行变化（做→不做），而要看“ます”的位置进行变化，如： ​ ここでは写真を撮ってはいけませんよ。 ​ ここでは写真を撮ってはいけないよ。 昨日はとても楽しかった。昨天玩得非常高兴。 一类形容词做谓语时的简体形：把“です”去掉即可。 一类形容词 肯定/否定 敬体形 简体形 现在、将来形式 肯定 忙しいです 忙しい 否定 忙しくないです 忙しくない 过去形式 肯定 忙しかったです 忙しかった 否定 忙しくなかったです 忙しくなかった コンピュータは簡単ではない。电脑可不简单。 二类形容词的敬体形，是把“だ”替换为“です”，因此变回简体形时要把“だ”加回来： 二类形容词 肯定/否定 敬体形 简体形 现在、将来形式 肯定 簡単です 簡単だ 否定 簡単ではありません 簡単ではない 过去形式 肯定 簡単でした 簡単だった 否定 簡単ではありませんでした 簡単ではなかった 注意：疑问句以简体形结尾时，把“だ”去掉。 ​ このネクタイ、派手？ ​ 森さんのデパート、静か？ ​ ーーーうん、静かだよ。 今日は曇りだ。今天是阴天。 名词的简体形基本与二类形容词相同： 名词 肯定/否定 敬体形 简体形 现在、将来形式 肯定 晴れです 晴れだ 否定 晴れではありません 晴れではない 过去形式 肯定 晴れでした 晴れだった 否定 晴れではありませんでした 晴れではなかった ​ 昨日、スキー場は雪だった？ ​ ーーーううん、雪じゃなかったよ。いい天気だった。 关于省略 疑问句时可省略“か” ​ 美味しいですか。 ​ 美味しい？ 使用简体时，经常省略“だ”，特别是女性 ​ 明日雨ですか。 ​ 明日雨？ ​ 今暇ですよ。 ​ 今暇よ/暇だよ。 不会产生歧义的助词，经常被省略 ​ 何を食べたいですか。 ​ 何食べたい？ ​ 今病院へ行きます。 ​ 今病院行く。 而比如： ​ 森さんに電話をかけましたよ。 就不可以省略为： ​ 森さん電話かけだよ。 因为此时会产生歧义，不知道是打给谁。 “〜ています”的简体“〜ている”中，经常省略“い”，只用“〜てる” ​ 何をしていますか。 ​ 何してる？ ​ テレビを見ています。 ​ テレビ見てる。 ​ 車を持っていませか。 ーーーいいえ、持っていない。 ​ 車持っている？ ーーーいいえ、持ってない。 ​ 愛している ​ 愛してる。 “かな”的用法 表示自言自语 ​ 明日雨かな。 如果对方在场时，则表达自己对这个信息也不十分确定 ​ 銀行は今日休みかな。 ​ 森さん明日仕事かな。 对方在场时，向对方提出委婉的请求 ​ 森君、これ、コピーしてくれるかな。 对方在场时，表达一种不太同意对方的观点，不太相信对方的话，但是也不想为此争论的语气， “是吗？”“…么？” ​ ディズニーランド、面白いかな。（并不觉得好玩，但也不想争论） ​ へえ？美味しいかな。（能好吃吗？） ​ 本当かな。（不能吧？） 旅行って、どこへ行く？ “〜って”，表示“引用、传闻”“传达别人的”“听说”等意。 ​ 小野さんは忙しいって、今日来ない。 ​ 明日って、間に合わないよ。 全然、派手じゃないわ。一点都不花哨。 “わ”主要是女性使用的句尾，类似于“よ”，表达一种委婉的语气，两者还可以连用。 ちょっと難しかったけど、まあまあできたよ。有点难，不过都做出来了。 结构：句子 + けど + 句子，“けど”连接两个句子，表示转折，多用于口语； ​ 昨日の試験は難しかったけど、まあまあでけたよ。 还可以表示**“铺垫”**，用来表达“询问、邀请、建议”。 ​ 来週、送別会をるけど、都合はどうかな？ “〜方”，表示“〜的做法” 动词“ます”形去掉“ます”加上“方”就成了“〜的做法”的意思，用来表示动作的方式； 三类动词直接去掉“し”加上“方”即可，如“説明方”。 ます型 去掉ます 〜方 释义 話（はな）します 話し 話し方 说法 読みます 読み 読み方 读法 作（つく）ります 作り 作り方 做法 やります やり やり方 办法 使（つか）います 使い 使い方 用法 关于三种“做法”的辨析： 作り方 做法（制作方法） やり方 方法（做事方针，“我不同意你的做法”） しかた 办法（想点办法，“真拿你没办法”） 第二十三課 休みの日、散歩したり買い物に行ったりします 内容：たり的用法、かどうか等表示不确定的语法 小野さんは休みの日、散歩したり買い物に行ったりします。 周末或节假日时，小野女士有时去散步，有时去买东西 结构：动词た形去掉た + たり + 动词た形去掉た + たりします，即将**“た形”变为“たり”**， 表示例举若干个有代表性的动作，是一种不完全列举，“有时～，有时～”，可以只用一个或多个。 ​ 吉田さんは日曜日には何をしますか。 ​ ーーー家の掃除をしたり洗濯をしたりします。 动词、一二类形容词、名词都可以用这个结构，且一二类车形容词出现的状态一般是一对反义，如“一会冷，一会热”； 用“です”和“します”结尾均可。 词性 结构 一类形容词 かったり 二类形容词 だったり 名词 だったり ​ 日によって暇だったり忙しかったりです。 根据日期，有时闲，有时忙。 ​ 飛行機のチケットは高かったり 安かったりです。 ​ マンションの部屋は広かったり 狭かったりです。 ​ この公園は時間によって静かだったり にぎやかだったりです。 ​ 日本語の先生は中国人だったり 日本人だったりです。 这个结构比起“〜や〜やなど”，多了一种变化不定的，穿插的感觉，而前者只是单纯的名词列举。 ​ 休みは土曜日 と 日曜日です。 这周，周六日两天休息。 ​ 休みは土曜日 や 日曜日です。 这周除了周六日两天，还有别的日子可以休息。 ​ 休みは土曜日 か 日曜日です。 这周，周六或周日休息。 ​ 休みは土曜日だったり 日曜日だったりです。 这周周六休息，或这周日休息，并不知道具体哪天。 私は今年の夏、北京へ行くかどうか分かりません。我今年去不去北京，还不知道。 将不包含疑问句的疑问句作为一个长句中的一部分时，将动词、一类形容词的敬体形变为简体形，并在其后加“かどうか”，表示某种不确定的内容； 类似于： ​ “明天考试吗？” ​ 我不知道明天考试吗。 后句的“明天考试吗”就是一个相当于名词的成分。 结构：小句 + かどうか ​ この料理は辛いですか。 ＋ 私は知りません。 ​ 私はこの料理が辛いかどうか知りません。 子句母句结合时，子句主语要降级，即使用“大は小が结构”，以免产生歧义；不产生歧义时可不变。 也可以重复使用动词的“基本形”和“ない形”，表达同样的含义。 ​ 私は 今年の夏、北京へ行くか 行かないか 分かりません。 ​ 私はこの料理は 辛いか 辛くないか 分かりません。 如果“かどうか”的前面为名词或二类形容词时，“かどうか”直接接在名词或二类形容词后面，其间不加“だ”； 另外，“かどうか”小句中的主语后面必须用“が”，而不能用“は”。 ​ キムさんは中国人ですか。 ＋ 私は知りません。 ​ → 私は キムさんが 中国人かどうか 知りません。 ​ → 私は キムさんが 中国人か 中国人ではないか 知りません。 ​ × 私は キムさんが 中国人だか どうか 知りません。 这里不降级的话就会产生歧义。 森さんが何時ごろ来るか知っていますか。不知道森先生几点来。 结构：句子 + か + 动词，相当于特殊疑问句，表示对整个小句子的内容的不确定。 将包含“何”“だれ”“どこ”等的疑问句，作为一个长句中的一部分使用时，需将疑问句小句的动词、一类形容词的敬体形变为简体形，再加“か”。 ​ 鍵がどこに あるか 教えてください ​ 昨日何を 食べたか 忘れました。 ​ どの料理が 辛いか 知りません。 与上面的“かどうか”相同，“か”前面出现名词或二类形容词时，直接接在名词或二类形容词后面，不加“だ”。 ​ この歌が誰の歌か 知っていますか。 ​ ここで電話を使ってもいいですか ​ ーーーさあ、いいかどうかわかりません。 によって 基本意思相当于“根据…不同”，但在句中可灵活翻译，也可以以“〜に よります”的形式用于句尾。 ​ 結婚式のやり方は 国によって 違います。 ​ この電車は いつも込みますか。 ​ ーーーいえ、時間に よります。 当需要用动词来表达状态时，用“〜ています”进行修饰。 ​ 道が込んでいます。 バスが込んでいます。公交车很拥挤。 当需要用动词来表达状态时，用“〜ています”进行修饰。 ​ 道が込んでいます。 “決まります”与“決めます” “決まります”，自动词，不是自己个人的决定，而是说“这个事已经定下来了吗？”，或者谈论自己无权决定的事。 为了避免个人主义的感觉，表示注重结果，而不注重做决定的是谁。 常用“決まっていません”来表示“不一定”。 “決めます”与前者相对，，是他动词，表示“自己决定”这个动作。 知らせます 告诉，通知； 名词化：お知らせ，告诉、通知。 第二十四課 李さんはもうすぐ来ると思います 内容：表示思考的内容 李さんはもうすぐ来ると思います。 我想小李很快会来的。 结构：小句简体形 + と思います，表达说话人思考的内容，向他人陈述自己的想法，“我想～”。 否定：小句简体形 + と思いません，“我不想～”。 注意： 前面的小句谓语必须是简体形； 只能用于第一、第二人称，不能用于第三人称； 李さんはもうすぐ 来ると 思います。 田中さんは 来（こ）ない と 思います。 この本は 面白い と 思います。 日本は 綺麗だ と 思います。 “綺麗”是一个二类形容词，要加上“だ”。 明日はいい天気だと思います。 “いい天気”是一个名词，也要加上“だ”。 这里的“と”起到的作用是**“提示内容”**，这个内容是完整的简体形。 “〜と思います”只能表示第一人称的思考内容，但“〜と思いました”和“〜と思っています”既可以表示第一人称的思考内容，也可以表示第一人称以外的人的思考内容。 ​ 馬さんは 日本へ 行きたい と 思っています。 这一系列的结构有以下四种： 〜と 思います / 思いません，表示自己的想法； 〜と 思っています / 思っていません，表示他人现在的想法； 〜と 思いました / 思いませんでした，表示他人过去的想法，“以为”； 〜と 思っていました / 思っていませんでした，表示他人曾经持续过的想法，“一度以为，曾经一直认为”。 这四种都可以用于第一、第二人称，但只有后 3 种可以表示说话人以外的人（第三人称）的思考内容； 1 和 2 都只能用于第一人称，区别在于 1 偏重于临场的想法，2 偏重于一直有的想法； 只要是 1 结构，就只能表达“我想…”的意思。 而我们无从得知他人的想法从何时开始，只能说他人现在有某种想法，因此第三人称不能使用 3 结构，只能用 2 。 当小句子的主语会引起歧义时，小句主语需降级。 ​ 課長 は 来ると思わなかった。 课长没想到〜会来。 ​ 課長 が 来ると思わなかった。 我没想到课长会来。 上句使用了 3 结构，可以用来表示他人的想法； 而下句使用了 1 结构，因此只能表示“我认为”。 ​ 先生 は 怒ったと思う。 我认为老师生气了。 ​ 先生 が 怒ったと思う。 我认为老师生气了。 陳さんはパーテイに行くと言いました。小陈说去参加联欢会。 结构：名词（人） + は + 句子（别人说话的内容） + と言いました，转述他人说的话，“某人说～”； 直接引语时，可以直接用“「」”将引用部分提示出来； 间接引语时，要使用简体，并且人物称呼、时间等要注意转换。 当询问说了什么时，用“何と言いましたか”，这里的简体形不用“何だ”，直接用“何”。 ​ 鈴木さんは「さようなら」 と言って、部屋を出ました。 ​ 陳さんは中国語の試験は難しかった と言いました。 ​ 部長はお嬢さんが来年大学に入る と言いました。 这里即把“娘”转换为“お嬢さん” 如果想明确指出是向谁说的，则在句子中加入名词 + に； ​ 小野さんは 李さんに ちょっと休みたい と 言いました。 转述某人反复说起的事情时，用と 言いって いませ； ​ 来週のハイキングに 張さんも 行きたい と 言いっています。 注意：“〜と思います”及“〜と言いました”前面出现名词或二类形容词小句时，必须加“だ”。 ​ あそこは 駅だ と 思います。 与“〜と思います”类似，当小句子的主语会引起歧义时，小句主语需降级。 ​ 課長は 奥さんは 料理が下手だ と 言いました。 意义不明，两个“は”不知道究竟说的是谁，需要改为： ​ 課長は 奥さんが 料理が下手だ と 言いました。 すみません、頭が痛いんです。对不起，我头疼。 结构：句子（简体形）+ んです（口语），句子（简体形） + のです（书面语） 表示所讲的内容与前句或前项内容有关联，用于说明状况或解释原因； 前接简体形，但名词和二类形容词的现在和将来形的肯定形，“だ”要换成“な”。 今日は日曜日です。 ​ → 今日は日曜日なんです。 今天是周日嘛。 ​ あの人は日本語が上手ですね。 ​ ーーーあの人は日本に3年ぐらい 住んでいた んですよ。 这里的“います”视为二类动词，简体形为“いる”，た形为“いた”。 ​ マイクを使って、答えてください。 ​ ーーーすみません、マイクがないんです。 提问时：どうして + のですか/んですか ​ どうして頭がいたいんですか。 为什么头疼？ ​ 昨日、どうして休んだんですか。 ​ ーーー頭が痛かったんです。 在一般疑问句中，使用“～のですか/んですか”来询问时，往往不是想要知道答案的是与否， 而是想听到隐含的更进一步的解释。 ​ タバコを吸うんですか。 你怎么吸烟啊？ ​ ニンジンを食べないんですか。 你不吃胡萝卜啊？ ​ 昼ごはんを食べないの？ ​ ーーーええ、朝ごはんを食べ過ぎたの。 〜のですが/んですが,〜用于承上启下，后项往往是请求、拜托、拒绝、询问、邀请等，有时会有难以启齿的语气， 而且常常省略后半句。 ​ 東京タワーへ行きたいんですが、どうやって行きますか。 ​ 李さんを探しているんですが、どこにいますか。 ​ 電話を借りたいんですが…。 東京タワーへ行きたいんですが、どうやって行きますか。我想去东京塔，怎么去好啊？ 结构：句子 + が + 句子，前一句为后面的话做铺垫。 与十六课的表示转折的用法相近，“が”还可以用来提示接下来要说的内容，可理解为“铺垫”。 与二十二课的“けど”相比，“が”多用于书面语。 ​ 明日から、連休ですが、どうするか決めましたか。 “話”与“話し” 两者都读“はなし”； 日语中有一部分的动词的“ます”去掉“ます”可以变为名词，但注意并不是所有动词都能这么变。 “おかしい”和“面白い” 单词 释义 おかしい 滑稽，可笑，甚至可以表示怪异 おもしろい 有趣，耐人寻味，精彩 とうとう（到頭） 副词，相当于汉语的“终于、结局、到底”等，表示无论结果好坏，想到的事态经过一定的阶段终于实现了。 ​ とうとうお別れですね。 ​ 息子がとうとう大学を卒業しました。 “きっと”“必ず（かならず）”“絶対に（ぜったいに）”辨析 きっと：推测，猜，较主观； 必ず：语气比前者更强，且常用于客观的判断，有“没有例外”的感觉，只能用于肯定句； 絶対に：肯定否定均可，语气与“必ず”相近。 この商品は…売れる. あの人は…行かないよ 彼女は…疲れたのだろう 筆記具を…持参すること …うまく行くとは限らない きっと ○ ○ ○ — — 必ず ○ — — ○ ○ 絶対に ○ ○ — △ ○ 分别时的寒暄语 お世話になりました 收到别人的照顾和帮助，分别时所说的表示感谢的话； ​ ありがとう、本当にお世話になりました。 今后将要得到别人的帮助时，用“お世話になります”。 ​ 初めまして、李です。これからお世話になります。 〜によろしくお伝えください 意思是“请向〜问好”。“よろしくお伝えください”是“よろしく伝えてください”的敬语形式，如果想要加重语气，可以在前面加上“どうぞ”。 ​ どうぞ吉田課長によろしくお伝えください。 如果双方关系亲密，不需要特别客套时可以只说“〜によろしく” ​ 李さんによろしく。 “お元気で”“お気をつけて” “お元気で”表示“请多保重”，一般用于较长时间的分离，祝愿对方身体健康； 相应的“お大事に” 只能对生病的人或受伤的人使用； “お気をつけて”用于一般性分别，祝愿对方路途平安； 这三者都可以在前面加上“どうぞ”。 どうやって，询问方法 “どうやって”由疑问词“どう”与动词“やる”的て形，即“やって”结合而成，用于询问方法，“该怎样做”； ​ 東京タワーへいけたいですが、どうやって行きますか。 “どうして”由疑问词“どう”与动词“する”的て形，即“して”结合而成，用于询问理由，“为什么”。 ​ どうして食べないんですか。 ​ 役に立ちます 役に立ちます（やくにたちます），表示有用。 其名词形式：役立ちます（やくだちます）可单独使用。 ​ 勉強に役に立ちます。 有关“中”的用法 用处 发音 年、日 じゅうに 周、月 ちゅうに 同时，“ちゅうに”的读音还可以表示“正在进行时”, 结构： 一类、二类去掉“ます”加上“中”； 三类动词去掉“します”加上“中”; 并不是所有的一、二类动词都可以后续“中”。 ​ 課長は出張中ですが、李さんによろしく言っていましたよ。 ​ 森さんに何度も電話をかけましたが、話中でした。 笑います 作为自动词，“（自己）笑”； 作为他动词，“〜を笑います”，“嘲笑、笑话”。 ​ 私を笑いないでください。 について 相当于汉语的“关于，有关〜”，一般后续“考えます”“思います”“研究します”等表示思维活动的词语； 用作标题时，如“日本の音楽について”一般省略后面的动词。 ​ 日本の アニメに ついて どう思いますか。","categories":[{"name":"日语学习","slug":"日语学习","permalink":"http://yoursite.com/categories/%E6%97%A5%E8%AF%AD%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"日语","slug":"日语","permalink":"http://yoursite.com/tags/%E6%97%A5%E8%AF%AD/"}]},{"title":"Hello World","slug":"hello-world","date":"2019-11-11T14:19:05.574Z","updated":"2019-11-11T14:19:05.574Z","comments":true,"path":"2019/11/11/hello-world/","link":"","permalink":"http://yoursite.com/2019/11/11/hello-world/","excerpt":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick Start Create a new post $ hexo new \"My New Post\" More info: Writing Run server $ hexo server More info: Server Generate static files $ hexo generate More info: Generating Deploy to remote sites $ hexo deploy More info: Deployment","categories":[],"tags":[]}]}